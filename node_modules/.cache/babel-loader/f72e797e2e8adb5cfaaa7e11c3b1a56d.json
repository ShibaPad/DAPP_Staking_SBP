{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\Desktop\\\\shibapad_staking-main (2)\\\\shibapad_staking-main\\\\src\\\\component\\\\Modal.js\";\nimport React from 'react';\nimport Modal from 'react-modal';\nimport backGoundImg from '../assets/background.png';\nimport styled from 'styled-components';\nimport Store from '../store/store';\nimport { useAlert } from 'react-alert';\n\nconst CustomModal = _ref => {\n  let {\n    visible,\n    onRequestClose,\n    type,\n    stakingId\n  } = _ref;\n  const alert = useAlert();\n\n  const handleClaim = () => {\n    if (type === 'claim') {\n      Store.unStakeSBP(stakingId).then(res => {\n        if (res.result) {\n          alert.show(res.msg, {\n            type: 'success'\n          });\n          Store.fetchAccountInfo();\n        } else {\n          alert.show(res.msg, {\n            type: 'error'\n          });\n        }\n      });\n    } else {\n      Store.earlyClaimSBP(stakingId).then(res => {\n        if (res.result) {\n          alert.show(res.msg, {\n            type: 'success'\n          });\n          Store.fetchAccountInfo();\n        } else {\n          alert.show(res.msg, {\n            type: 'error'\n          });\n        }\n      });\n    }\n\n    onRequestClose();\n  };\n\n  return /*#__PURE__*/React.createElement(Modal, {\n    isOpen: visible,\n    onRequestClose: () => onRequestClose(),\n    style: style,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(TextWrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }\n  }, type === 'claim' ? 'Do you want to claim?' : `You can't earn any reward & will lose ${Store.paneltyFee}% of tokens by Emergency claim`), /*#__PURE__*/React.createElement(ButtonWrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    onClick: handleClaim,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }\n  }, type === 'claim' ? 'Claim' : 'Emergency Claim'), /*#__PURE__*/React.createElement(Button, {\n    onClick: onRequestClose,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }\n  }, \"Cancel\")));\n};\n\nconst style = {\n  overlay: {\n    position: 'fixed',\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n    backgroundColor: 'transparent'\n  },\n  content: {\n    // text: 'Teko',\n    fontFamily: 'Teko',\n    fontSize: '1.5rem',\n    fontWeight: '500',\n    color: '#fff',\n    position: 'absolute',\n    top: '40px',\n    left: '40px',\n    right: '40px',\n    bottom: '40px',\n    border: '1px solid #ccc',\n    background: '#fff',\n    overflow: 'auto',\n    WebkitOverflowScrolling: 'touch',\n    outline: 'none',\n    padding: '20px',\n    width: '20rem',\n    height: '10rem',\n    margin: 'auto',\n    borderRadius: '15px',\n    border: 'solid 2px #f6c179',\n    backgroundImage: `url(${backGoundImg})`,\n    backgroundSize: '500px',\n    display: 'flex',\n    flexFlow: 'column'\n  }\n};\nexport default CustomModal;\nconst TextWrapper = styled.div`\n  height: 10rem;\n`;\nconst ButtonWrapper = styled.div`\n  display: flex;\n`;\nconst Button = styled.button`\n  width: 8rem;\n  border-radius: 1rem;\n  border: solid 2px #d5ccc8;\n  background-color: #66ac5b;\n  font-family: Teko;\n  font-size: 1.3rem;\n  font-weight: 500;\n  font-stretch: normal;\n  font-style: normal;\n  letter-spacing: normal;\n  text-align: center;\n  color: #fff;\n  margin: auto;\n`;","map":{"version":3,"sources":["C:/Users/user/Desktop/shibapad_staking-main (2)/shibapad_staking-main/src/component/Modal.js"],"names":["React","Modal","backGoundImg","styled","Store","useAlert","CustomModal","visible","onRequestClose","type","stakingId","alert","handleClaim","unStakeSBP","then","res","result","show","msg","fetchAccountInfo","earlyClaimSBP","style","paneltyFee","overlay","position","top","left","right","bottom","backgroundColor","content","fontFamily","fontSize","fontWeight","color","border","background","overflow","WebkitOverflowScrolling","outline","padding","width","height","margin","borderRadius","backgroundImage","backgroundSize","display","flexFlow","TextWrapper","div","ButtonWrapper","Button","button"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport Modal from 'react-modal';\r\nimport backGoundImg from '../assets/background.png';\r\nimport styled from 'styled-components';\r\nimport Store from '../store/store';\r\nimport { useAlert } from 'react-alert';\r\nconst CustomModal = ({ visible, onRequestClose, type, stakingId }) => {\r\n  const alert = useAlert();\r\n  const handleClaim = () => {\r\n    if (type === 'claim') {\r\n      Store.unStakeSBP(stakingId).then(res => {\r\n        if (res.result) {\r\n          alert.show(res.msg, { type: 'success' });\r\n          Store.fetchAccountInfo();\r\n        } else {\r\n          alert.show(res.msg, { type: 'error' });\r\n        }\r\n      });\r\n    } else {\r\n      Store.earlyClaimSBP(stakingId).then(res => {\r\n        if (res.result) {\r\n          alert.show(res.msg, { type: 'success' });\r\n          Store.fetchAccountInfo();\r\n        } else {\r\n          alert.show(res.msg, { type: 'error' });\r\n        }\r\n      });\r\n    }\r\n\r\n    onRequestClose();\r\n  };\r\n  return (\r\n    <Modal\r\n      isOpen={visible}\r\n      onRequestClose={() => onRequestClose()}\r\n      style={style}\r\n    >\r\n      <TextWrapper>\r\n        {type === 'claim'\r\n          ? 'Do you want to claim?'\r\n          : `You can't earn any reward & will lose ${Store.paneltyFee}% of tokens by Emergency claim`}\r\n      </TextWrapper>\r\n      <ButtonWrapper>\r\n        <Button onClick={handleClaim}>\r\n          {type === 'claim' ? 'Claim' : 'Emergency Claim'}\r\n        </Button>\r\n        <Button onClick={onRequestClose}>Cancel</Button>\r\n      </ButtonWrapper>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nconst style = {\r\n  overlay: {\r\n    position: 'fixed',\r\n    top: 0,\r\n    left: 0,\r\n    right: 0,\r\n    bottom: 0,\r\n    backgroundColor: 'transparent',\r\n  },\r\n  content: {\r\n    // text: 'Teko',\r\n\r\n    fontFamily: 'Teko',\r\n    fontSize: '1.5rem',\r\n    fontWeight: '500',\r\n    color: '#fff',\r\n    position: 'absolute',\r\n    top: '40px',\r\n    left: '40px',\r\n    right: '40px',\r\n    bottom: '40px',\r\n    border: '1px solid #ccc',\r\n    background: '#fff',\r\n    overflow: 'auto',\r\n    WebkitOverflowScrolling: 'touch',\r\n    outline: 'none',\r\n    padding: '20px',\r\n    width: '20rem',\r\n    height: '10rem',\r\n    margin: 'auto',\r\n    borderRadius: '15px',\r\n    border: 'solid 2px #f6c179',\r\n    backgroundImage: `url(${backGoundImg})`,\r\n    backgroundSize: '500px',\r\n    display: 'flex',\r\n    flexFlow: 'column',\r\n  },\r\n};\r\nexport default CustomModal;\r\nconst TextWrapper = styled.div`\r\n  height: 10rem;\r\n`;\r\nconst ButtonWrapper = styled.div`\r\n  display: flex;\r\n`;\r\nconst Button = styled.button`\r\n  width: 8rem;\r\n  border-radius: 1rem;\r\n  border: solid 2px #d5ccc8;\r\n  background-color: #66ac5b;\r\n  font-family: Teko;\r\n  font-size: 1.3rem;\r\n  font-weight: 500;\r\n  font-stretch: normal;\r\n  font-style: normal;\r\n  letter-spacing: normal;\r\n  text-align: center;\r\n  color: #fff;\r\n  margin: auto;\r\n`;\r\n"]},"metadata":{},"sourceType":"module"}