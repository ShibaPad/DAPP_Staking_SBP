{"ast":null,"code":"import Web3 from 'web3';\nimport Web3EthContract from 'web3-eth-contract';\nimport Web3Modal from 'web3modal';\nimport WalletConnectProvider from '@walletconnect/web3-provider';\nconst providerOptions = {\n  walletconnect: {\n    package: WalletConnectProvider,\n    options: {\n      // Mikko's test key - don't copy as your mileage may vary\n      infuraId: '8043bb2cf99347b1bfadfb233c5325c0',\n      rpc: {\n        56: 'https://bsc-dataseed.binance.org/'\n      }\n    }\n  }\n};\nlet provider;\nlet web3;\nlet abi_SBP;\nlet abi_staking;\nlet CONFIG_SBP;\nlet CONFIG_staking;\nconst Repository = {\n  fetchContract: async () => {\n    abi_SBP = await fetch('/config/abi_SBP.json', {\n      headers: {\n        'Content-Type': 'application/json',\n        Accept: 'application/json'\n      }\n    }).then(res => {\n      return res.json();\n    });\n    abi_staking = await fetch('/config/abi_staking.json', {\n      headers: {\n        'Content-Type': 'application/json',\n        Accept: 'application/json'\n      }\n    }).then(res => {\n      return res.json();\n    });\n    CONFIG_SBP = await fetch('/config/config_SBP.json', {\n      headers: {\n        'Content-Type': 'application/json',\n        Accept: 'application/json'\n      }\n    }).then(res => {\n      return res.json();\n    });\n    CONFIG_staking = await fetch('/config/config_staking.json', {\n      headers: {\n        'Content-Type': 'application/json',\n        Accept: 'application/json'\n      }\n    }).then(res => {\n      return res.json();\n    });\n    const smartContractObj_SBP = new Web3EthContract(abi_SBP, CONFIG_SBP.CONTRACT_ADDRESS);\n    const smartContractObj_staking = new Web3EthContract(abi_staking, CONFIG_staking.CONTRACT_ADDRESS);\n    return {\n      smartContract_SBP: smartContractObj_SBP,\n      smartContract_staking: smartContractObj_staking\n    };\n  },\n  walletConnect: async () => {\n    let web3Modal = new Web3Modal({\n      cacheProvider: false,\n      // optional\n      providerOptions // required\n      // disableInjectedProvider: true, // optional. For MetaMask / Brave / Opera.\n\n    });\n\n    try {\n      provider = await web3Modal.connect();\n    } catch (e) {\n      console.log('Could not get a wallet connection', e);\n      return;\n    }\n\n    web3 = new Web3(provider);\n    Web3EthContract.setProvider(provider);\n\n    try {\n      const networkId = await web3.eth.getChainId();\n      const [accounts] = await web3.eth.getAccounts();\n\n      if (networkId == CONFIG_staking.NETWORK.ID) {\n        return accounts; // Add listeners end\n      } else {\n        throw 'netErr';\n      }\n    } catch (err) {\n      if (err === 'netErr') throw `Change network to ${CONFIG_staking.NETWORK.NAME}.`;else throw new Error('Something went wrong.'); // dispatch(connectFailed('Something went wrong.'));\n    }\n  },\n  getTVL: async contract => {\n    try {\n      const res = await contract.StakerTVL().call();\n      return res;\n    } catch (err) {\n      throw new Error('Failed Getting Total_Value_Locked !');\n    }\n  },\n  approveMaxBalance: async _ref => {\n    let {\n      contract,\n      stakingAddress,\n      account\n    } = _ref;\n\n    try {\n      const res = await contract.approveMax(stakingAddress).send({\n        from: account\n      });\n      return res;\n    } catch (err) {\n      throw new Error('Failed Getting ApproveMax');\n    }\n  },\n  getAllowance: async _ref2 => {\n    let {\n      contract,\n      stakingAddress,\n      account\n    } = _ref2;\n\n    try {\n      const res = await contract.allowance(account, stakingAddress).call();\n      return res;\n    } catch (err) {\n      throw new Error('Failed Getting Allowance');\n    }\n  },\n  getAccountStakingTotal: async _ref3 => {\n    let {\n      contract,\n      account\n    } = _ref3;\n\n    try {\n      const res = await contract.AccountStakingTotal(account).call();\n      return res;\n    } catch (err) {\n      throw new Error('Failed Getting Account Staking Total !');\n    }\n  },\n  getTotalExpectedReward: async _ref4 => {\n    let {\n      contract,\n      account\n    } = _ref4;\n\n    try {\n      const res = await contract.getTotalRewardsExpected(account).call();\n      return res;\n    } catch (err) {\n      throw new Error('Failed Getting Account Staking Total !');\n    }\n  },\n  getAccountTier: async _ref5 => {\n    let {\n      contract,\n      account\n    } = _ref5;\n\n    try {\n      const res = await contract.AccountTier(account).call();\n\n      if (res === 2) {\n        return 'Silver';\n      } else if (res === 3) {\n        return 'Gold';\n      } else if (res === 4) {\n        return 'Platinum';\n      } else if (res == 5) {\n        return 'Diamond';\n      } else {\n        return 'None';\n      }\n    } catch (err) {\n      throw new Error('Failed Getting Accounnt Tier !');\n    }\n  },\n  getSBPBalance: async _ref6 => {\n    let {\n      contract,\n      account\n    } = _ref6;\n\n    try {\n      const res = await contract.balanceOf(account).call();\n      return res;\n    } catch (err) {\n      throw new Error('Failed Getting Balance !');\n    }\n  },\n  getPenaltyFee: async _ref7 => {\n    let {\n      contract\n    } = _ref7;\n\n    try {\n      const res = await contract.getPenaltyFee().call(); // console.log(res);\n\n      return res;\n    } catch (err) {\n      throw new Error('Failed Getting PenaltyFee');\n    }\n  },\n  getStorageNumbers: async _ref8 => {\n    let {\n      contract\n    } = _ref8;\n\n    try {\n      const res = await contract.getStorageNumbers().call(); // console.log('storageNum: ', res);\n\n      return res;\n    } catch (err) {\n      throw new Error('Failed Getting Pool Number');\n    }\n  },\n  getPoolInfo: async _ref9 => {\n    let {\n      contract,\n      storageID\n    } = _ref9;\n\n    try {\n      const res = await contract.storages(storageID).call();\n      return res;\n    } catch (err) {\n      throw new Error('Failed Getting Pool Number');\n    }\n  },\n  getStakeIds: async _ref10 => {\n    let {\n      contract,\n      account\n    } = _ref10;\n\n    try {\n      const res = await contract.StakeIDs(account).call();\n      return res;\n    } catch (err) {\n      throw new Error('Failed Getting StakeIDs');\n    }\n  },\n  getStakedPool: async _ref11 => {\n    let {\n      contract,\n      account,\n      stakeIds\n    } = _ref11;\n\n    try {\n      const res = await contract.pools(account, stakeIds).call();\n      return res;\n    } catch (err) {\n      throw new Error('Faild Getting Pool Info');\n    }\n  },\n  stakeSBP: async _ref12 => {\n    let {\n      contract,\n      amount,\n      storageId,\n      account\n    } = _ref12;\n    var amounts = web3.utils.toWei(amount, 'ether');\n    const res = await contract.StakeSBP(amounts, storageId).send({\n      from: account\n    }); // console.log('res', res);\n\n    return res;\n  },\n  unStake: async _ref13 => {\n    let {\n      contract,\n      stakedId,\n      account\n    } = _ref13;\n\n    try {\n      const res = await contract.unstakeSBP(stakedId).send({\n        from: account\n      }); // console.log('unstakeSBP', res);\n\n      return res;\n    } catch (err) {\n      throw new Error('Failed Claim Reward');\n    }\n  },\n  earlyClaimSBP: async _ref14 => {\n    let {\n      contract,\n      stakedId,\n      account\n    } = _ref14;\n\n    try {\n      const res = await contract.earlyClaimSBP(stakedId).send({\n        from: account\n      }); // console.log('earlyClaimSBP', res);\n\n      return res;\n    } catch (err) {\n      throw new Error('Failed Claim Early Reward');\n    }\n  },\n  getStakeStatus: async _ref15 => {\n    let {\n      contract,\n      stakedId,\n      account\n    } = _ref15;\n\n    try {\n      return await contract.StakeStatus(account, stakedId).call();\n    } catch (err) {\n      throw new Error('Failed get Staking Status');\n    }\n  },\n  getExpectedPoolReward: async _ref16 => {\n    let {\n      contract,\n      stakedId,\n      account\n    } = _ref16;\n\n    try {\n      return await contract.expectedPoolReward(account, stakedId).call();\n    } catch (err) {\n      throw new Error('Failed get ExpectedPoolReward');\n    }\n  }\n};\nexport default Repository;","map":{"version":3,"sources":["C:/Users/user/Desktop/SBPGIT/DAPP_Staking_SBP/src/store/repository.js"],"names":["Web3","Web3EthContract","Web3Modal","WalletConnectProvider","providerOptions","walletconnect","package","options","infuraId","rpc","provider","web3","abi_SBP","abi_staking","CONFIG_SBP","CONFIG_staking","Repository","fetchContract","fetch","headers","Accept","then","res","json","smartContractObj_SBP","CONTRACT_ADDRESS","smartContractObj_staking","smartContract_SBP","smartContract_staking","walletConnect","web3Modal","cacheProvider","connect","e","console","log","setProvider","networkId","eth","getChainId","accounts","getAccounts","NETWORK","ID","err","NAME","Error","getTVL","contract","StakerTVL","call","approveMaxBalance","stakingAddress","account","approveMax","send","from","getAllowance","allowance","getAccountStakingTotal","AccountStakingTotal","getTotalExpectedReward","getTotalRewardsExpected","getAccountTier","AccountTier","getSBPBalance","balanceOf","getPenaltyFee","getStorageNumbers","getPoolInfo","storageID","storages","getStakeIds","StakeIDs","getStakedPool","stakeIds","pools","stakeSBP","amount","storageId","amounts","utils","toWei","StakeSBP","unStake","stakedId","unstakeSBP","earlyClaimSBP","getStakeStatus","StakeStatus","getExpectedPoolReward","expectedPoolReward"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,MAAjB;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,OAAOC,SAAP,MAAsB,WAAtB;AACA,OAAOC,qBAAP,MAAkC,8BAAlC;AACA,MAAMC,eAAe,GAAG;AACtBC,EAAAA,aAAa,EAAE;AACbC,IAAAA,OAAO,EAAEH,qBADI;AAGbI,IAAAA,OAAO,EAAE;AACP;AACAC,MAAAA,QAAQ,EAAE,kCAFH;AAGPC,MAAAA,GAAG,EAAE;AACH,YAAI;AADD;AAHE;AAHI;AADO,CAAxB;AAaA,IAAIC,QAAJ;AACA,IAAIC,IAAJ;AACA,IAAIC,OAAJ;AACA,IAAIC,WAAJ;AACA,IAAIC,UAAJ;AACA,IAAIC,cAAJ;AAGA,MAAMC,UAAU,GAAG;AACjBC,EAAAA,aAAa,EAAE,YAAY;AACzBL,IAAAA,OAAO,GAAG,MAAMM,KAAK,CAAC,sBAAD,EAAyB;AAC5CC,MAAAA,OAAO,EAAE;AACP,wBAAgB,kBADT;AAEPC,QAAAA,MAAM,EAAE;AAFD;AADmC,KAAzB,CAAL,CAKbC,IALa,CAKRC,GAAG,IAAI;AACb,aAAOA,GAAG,CAACC,IAAJ,EAAP;AACD,KAPe,CAAhB;AAQAV,IAAAA,WAAW,GAAG,MAAMK,KAAK,CAAC,0BAAD,EAA6B;AACpDC,MAAAA,OAAO,EAAE;AACP,wBAAgB,kBADT;AAEPC,QAAAA,MAAM,EAAE;AAFD;AAD2C,KAA7B,CAAL,CAKjBC,IALiB,CAKZC,GAAG,IAAI;AACb,aAAOA,GAAG,CAACC,IAAJ,EAAP;AACD,KAPmB,CAApB;AAQAT,IAAAA,UAAU,GAAG,MAAMI,KAAK,CAAC,yBAAD,EAA4B;AAClDC,MAAAA,OAAO,EAAE;AACP,wBAAgB,kBADT;AAEPC,QAAAA,MAAM,EAAE;AAFD;AADyC,KAA5B,CAAL,CAKhBC,IALgB,CAKXC,GAAG,IAAI;AACb,aAAOA,GAAG,CAACC,IAAJ,EAAP;AACD,KAPkB,CAAnB;AAQAR,IAAAA,cAAc,GAAG,MAAMG,KAAK,CAAC,6BAAD,EAAgC;AAC1DC,MAAAA,OAAO,EAAE;AACP,wBAAgB,kBADT;AAEPC,QAAAA,MAAM,EAAE;AAFD;AADiD,KAAhC,CAAL,CAKpBC,IALoB,CAKfC,GAAG,IAAI;AACb,aAAOA,GAAG,CAACC,IAAJ,EAAP;AACD,KAPsB,CAAvB;AAQA,UAAMC,oBAAoB,GAAG,IAAIvB,eAAJ,CAC3BW,OAD2B,EAE3BE,UAAU,CAACW,gBAFgB,CAA7B;AAIA,UAAMC,wBAAwB,GAAG,IAAIzB,eAAJ,CAC/BY,WAD+B,EAE/BE,cAAc,CAACU,gBAFgB,CAAjC;AAIA,WAAO;AACLE,MAAAA,iBAAiB,EAAEH,oBADd;AAELI,MAAAA,qBAAqB,EAAEF;AAFlB,KAAP;AAID,GA9CgB;AAgDjBG,EAAAA,aAAa,EAAE,YAAY;AACzB,QAAIC,SAAS,GAAG,IAAI5B,SAAJ,CAAc;AAC5B6B,MAAAA,aAAa,EAAE,KADa;AACN;AACtB3B,MAAAA,eAF4B,CAEX;AACjB;;AAH4B,KAAd,CAAhB;;AAKA,QAAI;AACFM,MAAAA,QAAQ,GAAG,MAAMoB,SAAS,CAACE,OAAV,EAAjB;AACD,KAFD,CAEE,OAAOC,CAAP,EAAU;AACVC,MAAAA,OAAO,CAACC,GAAR,CAAY,mCAAZ,EAAiDF,CAAjD;AACA;AACD;;AACDtB,IAAAA,IAAI,GAAG,IAAIX,IAAJ,CAASU,QAAT,CAAP;AAEAT,IAAAA,eAAe,CAACmC,WAAhB,CAA4B1B,QAA5B;;AACA,QAAI;AACF,YAAM2B,SAAS,GAAG,MAAM1B,IAAI,CAAC2B,GAAL,CAASC,UAAT,EAAxB;AACA,YAAM,CAACC,QAAD,IAAa,MAAM7B,IAAI,CAAC2B,GAAL,CAASG,WAAT,EAAzB;;AACA,UAAIJ,SAAS,IAAItB,cAAc,CAAC2B,OAAf,CAAuBC,EAAxC,EAA4C;AAC1C,eAAOH,QAAP,CAD0C,CAG1C;AACD,OAJD,MAIO;AACL,cAAM,QAAN;AACD;AACF,KAVD,CAUE,OAAOI,GAAP,EAAY;AACZ,UAAIA,GAAG,KAAK,QAAZ,EACE,MAAO,qBAAoB7B,cAAc,CAAC2B,OAAf,CAAuBG,IAAK,GAAvD,CADF,KAEK,MAAM,IAAIC,KAAJ,CAAU,uBAAV,CAAN,CAHO,CAIZ;AACD;AACF,GA/EgB;AAgFjBC,EAAAA,MAAM,EAAE,MAAMC,QAAN,IAAkB;AACxB,QAAI;AACF,YAAM1B,GAAG,GAAG,MAAM0B,QAAQ,CAACC,SAAT,GAAqBC,IAArB,EAAlB;AACA,aAAO5B,GAAP;AACD,KAHD,CAGE,OAAOsB,GAAP,EAAY;AACZ,YAAM,IAAIE,KAAJ,CAAU,qCAAV,CAAN;AACD;AACF,GAvFgB;AAwFjBK,EAAAA,iBAAiB,EAAE,cAAiD;AAAA,QAA1C;AAAEH,MAAAA,QAAF;AAAYI,MAAAA,cAAZ;AAA4BC,MAAAA;AAA5B,KAA0C;;AAClE,QAAI;AACF,YAAM/B,GAAG,GAAG,MAAM0B,QAAQ,CAACM,UAAT,CAAoBF,cAApB,EAAoCG,IAApC,CAAyC;AACzDC,QAAAA,IAAI,EAAEH;AADmD,OAAzC,CAAlB;AAGA,aAAO/B,GAAP;AACD,KALD,CAKE,OAAOsB,GAAP,EAAY;AACZ,YAAM,IAAIE,KAAJ,CAAU,2BAAV,CAAN;AACD;AACF,GAjGgB;AAkGjBW,EAAAA,YAAY,EAAE,eAAiD;AAAA,QAA1C;AAAET,MAAAA,QAAF;AAAYI,MAAAA,cAAZ;AAA4BC,MAAAA;AAA5B,KAA0C;;AAC7D,QAAI;AACF,YAAM/B,GAAG,GAAG,MAAM0B,QAAQ,CAACU,SAAT,CAAmBL,OAAnB,EAA4BD,cAA5B,EAA4CF,IAA5C,EAAlB;AACA,aAAO5B,GAAP;AACD,KAHD,CAGE,OAAOsB,GAAP,EAAY;AACZ,YAAM,IAAIE,KAAJ,CAAU,0BAAV,CAAN;AACD;AACF,GAzGgB;AA0GjBa,EAAAA,sBAAsB,EAAE,eAAiC;AAAA,QAA1B;AAAEX,MAAAA,QAAF;AAAYK,MAAAA;AAAZ,KAA0B;;AACvD,QAAI;AACF,YAAM/B,GAAG,GAAG,MAAM0B,QAAQ,CAACY,mBAAT,CAA6BP,OAA7B,EAAsCH,IAAtC,EAAlB;AACA,aAAO5B,GAAP;AACD,KAHD,CAGE,OAAOsB,GAAP,EAAY;AACZ,YAAM,IAAIE,KAAJ,CAAU,wCAAV,CAAN;AACD;AACF,GAjHgB;AAkHjBe,EAAAA,sBAAsB,EAAE,eAAiC;AAAA,QAA1B;AAAEb,MAAAA,QAAF;AAAYK,MAAAA;AAAZ,KAA0B;;AACvD,QAAI;AACF,YAAM/B,GAAG,GAAG,MAAM0B,QAAQ,CAACc,uBAAT,CAAiCT,OAAjC,EAA0CH,IAA1C,EAAlB;AACA,aAAO5B,GAAP;AACD,KAHD,CAGE,OAAOsB,GAAP,EAAY;AACZ,YAAM,IAAIE,KAAJ,CAAU,wCAAV,CAAN;AACD;AACF,GAzHgB;AA0HjBiB,EAAAA,cAAc,EAAE,eAAiC;AAAA,QAA1B;AAAEf,MAAAA,QAAF;AAAYK,MAAAA;AAAZ,KAA0B;;AAC/C,QAAI;AACF,YAAM/B,GAAG,GAAG,MAAM0B,QAAQ,CAACgB,WAAT,CAAqBX,OAArB,EAA8BH,IAA9B,EAAlB;;AACA,UAAI5B,GAAG,KAAK,CAAZ,EAAe;AACb,eAAO,QAAP;AACD,OAFD,MAEO,IAAIA,GAAG,KAAK,CAAZ,EAAe;AACpB,eAAO,MAAP;AACD,OAFM,MAEA,IAAIA,GAAG,KAAK,CAAZ,EAAe;AACpB,eAAO,UAAP;AACD,OAFM,MAEA,IAAIA,GAAG,IAAI,CAAX,EAAc;AACnB,eAAO,SAAP;AACD,OAFM,MAEA;AACL,eAAO,MAAP;AACD;AACF,KAbD,CAaE,OAAOsB,GAAP,EAAY;AACZ,YAAM,IAAIE,KAAJ,CAAU,gCAAV,CAAN;AACD;AACF,GA3IgB;AA4IjBmB,EAAAA,aAAa,EAAE,eAAiC;AAAA,QAA1B;AAAEjB,MAAAA,QAAF;AAAYK,MAAAA;AAAZ,KAA0B;;AAC9C,QAAI;AACF,YAAM/B,GAAG,GAAG,MAAM0B,QAAQ,CAACkB,SAAT,CAAmBb,OAAnB,EAA4BH,IAA5B,EAAlB;AACA,aAAO5B,GAAP;AACD,KAHD,CAGE,OAAOsB,GAAP,EAAY;AACZ,YAAM,IAAIE,KAAJ,CAAU,0BAAV,CAAN;AACD;AACF,GAnJgB;AAoJjBqB,EAAAA,aAAa,EAAE,eAAwB;AAAA,QAAjB;AAAEnB,MAAAA;AAAF,KAAiB;;AACrC,QAAI;AACF,YAAM1B,GAAG,GAAG,MAAM0B,QAAQ,CAACmB,aAAT,GAAyBjB,IAAzB,EAAlB,CADE,CAEF;;AACA,aAAO5B,GAAP;AACD,KAJD,CAIE,OAAOsB,GAAP,EAAY;AACZ,YAAM,IAAIE,KAAJ,CAAU,2BAAV,CAAN;AACD;AACF,GA5JgB;AA6JjBsB,EAAAA,iBAAiB,EAAE,eAAwB;AAAA,QAAjB;AAAEpB,MAAAA;AAAF,KAAiB;;AACzC,QAAI;AACF,YAAM1B,GAAG,GAAG,MAAM0B,QAAQ,CAACoB,iBAAT,GAA6BlB,IAA7B,EAAlB,CADE,CAEF;;AACA,aAAO5B,GAAP;AACD,KAJD,CAIE,OAAOsB,GAAP,EAAY;AACZ,YAAM,IAAIE,KAAJ,CAAU,4BAAV,CAAN;AACD;AACF,GArKgB;AAsKjBuB,EAAAA,WAAW,EAAE,eAAmC;AAAA,QAA5B;AAAErB,MAAAA,QAAF;AAAYsB,MAAAA;AAAZ,KAA4B;;AAC9C,QAAI;AACF,YAAMhD,GAAG,GAAG,MAAM0B,QAAQ,CAACuB,QAAT,CAAkBD,SAAlB,EAA6BpB,IAA7B,EAAlB;AACA,aAAO5B,GAAP;AACD,KAHD,CAGE,OAAOsB,GAAP,EAAY;AACZ,YAAM,IAAIE,KAAJ,CAAU,4BAAV,CAAN;AACD;AACF,GA7KgB;AA8KjB0B,EAAAA,WAAW,EAAE,gBAAiC;AAAA,QAA1B;AAAExB,MAAAA,QAAF;AAAYK,MAAAA;AAAZ,KAA0B;;AAC5C,QAAI;AACF,YAAM/B,GAAG,GAAG,MAAM0B,QAAQ,CAACyB,QAAT,CAAkBpB,OAAlB,EAA2BH,IAA3B,EAAlB;AACA,aAAO5B,GAAP;AACD,KAHD,CAGE,OAAOsB,GAAP,EAAY;AACZ,YAAM,IAAIE,KAAJ,CAAU,yBAAV,CAAN;AACD;AACF,GArLgB;AAsLjB4B,EAAAA,aAAa,EAAE,gBAA2C;AAAA,QAApC;AAAE1B,MAAAA,QAAF;AAAYK,MAAAA,OAAZ;AAAqBsB,MAAAA;AAArB,KAAoC;;AACxD,QAAI;AACF,YAAMrD,GAAG,GAAG,MAAM0B,QAAQ,CAAC4B,KAAT,CAAevB,OAAf,EAAwBsB,QAAxB,EAAkCzB,IAAlC,EAAlB;AACA,aAAO5B,GAAP;AACD,KAHD,CAGE,OAAOsB,GAAP,EAAY;AACZ,YAAM,IAAIE,KAAJ,CAAU,yBAAV,CAAN;AACD;AACF,GA7LgB;AA8LjB+B,EAAAA,QAAQ,EAAE,gBAAoD;AAAA,QAA7C;AAAE7B,MAAAA,QAAF;AAAY8B,MAAAA,MAAZ;AAAoBC,MAAAA,SAApB;AAA+B1B,MAAAA;AAA/B,KAA6C;AAC5D,QAAI2B,OAAO,GAAGrE,IAAI,CAACsE,KAAL,CAAWC,KAAX,CAAiBJ,MAAjB,EAAyB,OAAzB,CAAd;AACA,UAAMxD,GAAG,GAAG,MAAM0B,QAAQ,CAACmC,QAAT,CAAkBH,OAAlB,EAA2BD,SAA3B,EAAsCxB,IAAtC,CAA2C;AAC3DC,MAAAA,IAAI,EAAEH;AADqD,KAA3C,CAAlB,CAF4D,CAK5D;;AACA,WAAO/B,GAAP;AACD,GArMgB;AAsMjB8D,EAAAA,OAAO,EAAE,gBAA2C;AAAA,QAApC;AAAEpC,MAAAA,QAAF;AAAYqC,MAAAA,QAAZ;AAAsBhC,MAAAA;AAAtB,KAAoC;;AAClD,QAAI;AACF,YAAM/B,GAAG,GAAG,MAAM0B,QAAQ,CAACsC,UAAT,CAAoBD,QAApB,EAA8B9B,IAA9B,CAAmC;AACnDC,QAAAA,IAAI,EAAEH;AAD6C,OAAnC,CAAlB,CADE,CAIF;;AACA,aAAO/B,GAAP;AACD,KAND,CAME,OAAOsB,GAAP,EAAY;AACZ,YAAM,IAAIE,KAAJ,CAAU,qBAAV,CAAN;AACD;AACF,GAhNgB;AAiNjByC,EAAAA,aAAa,EAAE,gBAA2C;AAAA,QAApC;AAAEvC,MAAAA,QAAF;AAAYqC,MAAAA,QAAZ;AAAsBhC,MAAAA;AAAtB,KAAoC;;AACxD,QAAI;AACF,YAAM/B,GAAG,GAAG,MAAM0B,QAAQ,CAACuC,aAAT,CAAuBF,QAAvB,EAAiC9B,IAAjC,CAAsC;AACtDC,QAAAA,IAAI,EAAEH;AADgD,OAAtC,CAAlB,CADE,CAIF;;AACA,aAAO/B,GAAP;AACD,KAND,CAME,OAAOsB,GAAP,EAAY;AACZ,YAAM,IAAIE,KAAJ,CAAU,2BAAV,CAAN;AACD;AACF,GA3NgB;AA4NjB0C,EAAAA,cAAc,EAAE,gBAA2C;AAAA,QAApC;AAAExC,MAAAA,QAAF;AAAYqC,MAAAA,QAAZ;AAAsBhC,MAAAA;AAAtB,KAAoC;;AACzD,QAAI;AACF,aAAO,MAAML,QAAQ,CAACyC,WAAT,CAAqBpC,OAArB,EAA8BgC,QAA9B,EAAwCnC,IAAxC,EAAb;AACD,KAFD,CAEE,OAAON,GAAP,EAAY;AACZ,YAAM,IAAIE,KAAJ,CAAU,2BAAV,CAAN;AACD;AACF,GAlOgB;AAmOjB4C,EAAAA,qBAAqB,EAAE,gBAA2C;AAAA,QAApC;AAAE1C,MAAAA,QAAF;AAAYqC,MAAAA,QAAZ;AAAsBhC,MAAAA;AAAtB,KAAoC;;AAChE,QAAI;AACF,aAAO,MAAML,QAAQ,CAAC2C,kBAAT,CAA4BtC,OAA5B,EAAqCgC,QAArC,EAA+CnC,IAA/C,EAAb;AACD,KAFD,CAEE,OAAON,GAAP,EAAY;AACZ,YAAM,IAAIE,KAAJ,CAAU,+BAAV,CAAN;AACD;AACF;AAzOgB,CAAnB;AA4OA,eAAe9B,UAAf","sourcesContent":["import Web3 from 'web3';\nimport Web3EthContract from 'web3-eth-contract';\nimport Web3Modal from 'web3modal';\nimport WalletConnectProvider from '@walletconnect/web3-provider';\nconst providerOptions = {\n  walletconnect: {\n    package: WalletConnectProvider,\n\n    options: {\n      // Mikko's test key - don't copy as your mileage may vary\n      infuraId: '8043bb2cf99347b1bfadfb233c5325c0',\n      rpc: {\n        56: 'https://bsc-dataseed.binance.org/',\n      },\n    },\n  },\n};\nlet provider;\nlet web3;\nlet abi_SBP;\nlet abi_staking;\nlet CONFIG_SBP;\nlet CONFIG_staking;\n\n\nconst Repository = {\n  fetchContract: async () => {\n    abi_SBP = await fetch('/config/abi_SBP.json', {\n      headers: {\n        'Content-Type': 'application/json',\n        Accept: 'application/json',\n      },\n    }).then(res => {\n      return res.json();\n    });\n    abi_staking = await fetch('/config/abi_staking.json', {\n      headers: {\n        'Content-Type': 'application/json',\n        Accept: 'application/json',\n      },\n    }).then(res => {\n      return res.json();\n    });\n    CONFIG_SBP = await fetch('/config/config_SBP.json', {\n      headers: {\n        'Content-Type': 'application/json',\n        Accept: 'application/json',\n      },\n    }).then(res => {\n      return res.json();\n    });\n    CONFIG_staking = await fetch('/config/config_staking.json', {\n      headers: {\n        'Content-Type': 'application/json',\n        Accept: 'application/json',\n      },\n    }).then(res => {\n      return res.json();\n    });\n    const smartContractObj_SBP = new Web3EthContract(\n      abi_SBP,\n      CONFIG_SBP.CONTRACT_ADDRESS,\n    );\n    const smartContractObj_staking = new Web3EthContract(\n      abi_staking,\n      CONFIG_staking.CONTRACT_ADDRESS,\n    );\n    return {\n      smartContract_SBP: smartContractObj_SBP,\n      smartContract_staking: smartContractObj_staking,\n    };\n  },\n\n  walletConnect: async () => {\n    let web3Modal = new Web3Modal({\n      cacheProvider: false, // optional\n      providerOptions, // required\n      // disableInjectedProvider: true, // optional. For MetaMask / Brave / Opera.\n    });\n    try {\n      provider = await web3Modal.connect();\n    } catch (e) {\n      console.log('Could not get a wallet connection', e);\n      return;\n    }\n    web3 = new Web3(provider);\n\n    Web3EthContract.setProvider(provider);\n    try {\n      const networkId = await web3.eth.getChainId();\n      const [accounts] = await web3.eth.getAccounts();\n      if (networkId == CONFIG_staking.NETWORK.ID) {\n        return accounts;\n\n        // Add listeners end\n      } else {\n        throw 'netErr';\n      }\n    } catch (err) {\n      if (err === 'netErr')\n        throw `Change network to ${CONFIG_staking.NETWORK.NAME}.`;\n      else throw new Error('Something went wrong.');\n      // dispatch(connectFailed('Something went wrong.'));\n    }\n  },\n  getTVL: async contract => {\n    try {\n      const res = await contract.StakerTVL().call();\n      return res;\n    } catch (err) {\n      throw new Error('Failed Getting Total_Value_Locked !');\n    }\n  },\n  approveMaxBalance: async ({ contract, stakingAddress, account }) => {\n    try {\n      const res = await contract.approveMax(stakingAddress).send({\n        from: account,\n      });\n      return res;\n    } catch (err) {\n      throw new Error('Failed Getting ApproveMax');\n    }\n  },\n  getAllowance: async ({ contract, stakingAddress, account }) => {\n    try {\n      const res = await contract.allowance(account, stakingAddress).call();\n      return res;\n    } catch (err) {\n      throw new Error('Failed Getting Allowance');\n    }\n  },\n  getAccountStakingTotal: async ({ contract, account }) => {\n    try {\n      const res = await contract.AccountStakingTotal(account).call();\n      return res;\n    } catch (err) {\n      throw new Error('Failed Getting Account Staking Total !');\n    }\n  },\n  getTotalExpectedReward: async ({ contract, account }) => {\n    try {\n      const res = await contract.getTotalRewardsExpected(account).call();\n      return res;\n    } catch (err) {\n      throw new Error('Failed Getting Account Staking Total !');\n    }\n  },\n  getAccountTier: async ({ contract, account }) => {\n    try {\n      const res = await contract.AccountTier(account).call();\n      if (res === 2) {\n        return 'Silver';\n      } else if (res === 3) {\n        return 'Gold';\n      } else if (res === 4) {\n        return 'Platinum';\n      } else if (res == 5) {\n        return 'Diamond';\n      } else {\n        return 'None';\n      }\n    } catch (err) {\n      throw new Error('Failed Getting Accounnt Tier !');\n    }\n  },\n  getSBPBalance: async ({ contract, account }) => {\n    try {\n      const res = await contract.balanceOf(account).call();\n      return res;\n    } catch (err) {\n      throw new Error('Failed Getting Balance !');\n    }\n  },\n  getPenaltyFee: async ({ contract }) => {\n    try {\n      const res = await contract.getPenaltyFee().call();\n      // console.log(res);\n      return res;\n    } catch (err) {\n      throw new Error('Failed Getting PenaltyFee');\n    }\n  },\n  getStorageNumbers: async ({ contract }) => {\n    try {\n      const res = await contract.getStorageNumbers().call();\n      // console.log('storageNum: ', res);\n      return res;\n    } catch (err) {\n      throw new Error('Failed Getting Pool Number');\n    }\n  },\n  getPoolInfo: async ({ contract, storageID }) => {\n    try {\n      const res = await contract.storages(storageID).call();\n      return res;\n    } catch (err) {\n      throw new Error('Failed Getting Pool Number');\n    }\n  },\n  getStakeIds: async ({ contract, account }) => {\n    try {\n      const res = await contract.StakeIDs(account).call();\n      return res;\n    } catch (err) {\n      throw new Error('Failed Getting StakeIDs');\n    }\n  },\n  getStakedPool: async ({ contract, account, stakeIds }) => {\n    try {\n      const res = await contract.pools(account, stakeIds).call();\n      return res;\n    } catch (err) {\n      throw new Error('Faild Getting Pool Info');\n    }\n  },\n  stakeSBP: async ({ contract, amount, storageId, account }) => {\n    var amounts = web3.utils.toWei(amount, 'ether');\n    const res = await contract.StakeSBP(amounts, storageId).send({\n      from: account,\n    });\n    // console.log('res', res);\n    return res;\n  },\n  unStake: async ({ contract, stakedId, account }) => {\n    try {\n      const res = await contract.unstakeSBP(stakedId).send({\n        from: account,\n      });\n      // console.log('unstakeSBP', res);\n      return res;\n    } catch (err) {\n      throw new Error('Failed Claim Reward');\n    }\n  },\n  earlyClaimSBP: async ({ contract, stakedId, account }) => {\n    try {\n      const res = await contract.earlyClaimSBP(stakedId).send({\n        from: account,\n      });\n      // console.log('earlyClaimSBP', res);\n      return res;\n    } catch (err) {\n      throw new Error('Failed Claim Early Reward');\n    }\n  },\n  getStakeStatus: async ({ contract, stakedId, account }) => {\n    try {\n      return await contract.StakeStatus(account, stakedId).call();\n    } catch (err) {\n      throw new Error('Failed get Staking Status');\n    }\n  },\n  getExpectedPoolReward: async ({ contract, stakedId, account }) => {\n    try {\n      return await contract.expectedPoolReward(account, stakedId).call();\n    } catch (err) {\n      throw new Error('Failed get ExpectedPoolReward');\n    }\n  },\n};\n\nexport default Repository;"]},"metadata":{},"sourceType":"module"}