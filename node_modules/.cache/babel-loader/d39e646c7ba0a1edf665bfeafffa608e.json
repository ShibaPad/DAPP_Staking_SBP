{"ast":null,"code":"import _slicedToArray from\"C:\\\\Users\\\\user\\\\Desktop\\\\shibapad_staking-main (2)\\\\shibapad_staking-main\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";import _regeneratorRuntime from\"C:\\\\Users\\\\user\\\\Desktop\\\\shibapad_staking-main (2)\\\\shibapad_staking-main\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";import _asyncToGenerator from\"C:\\\\Users\\\\user\\\\Desktop\\\\shibapad_staking-main (2)\\\\shibapad_staking-main\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";import Web3 from'web3';import Web3EthContract from'web3-eth-contract';var _window=window,ethereum=_window.ethereum;var metamaskIsInstalled=ethereum&&ethereum.isMetaMask;var web3;var abi_SBP;var abi_staking;var CONFIG_SBP;var CONFIG_staking;if(metamaskIsInstalled){Web3EthContract.setProvider(ethereum);web3=new Web3(ethereum);}var Repository={fetchContract:function(){var _fetchContract=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var smartContractObj_SBP,smartContractObj_staking;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return fetch('/config/abi_SBP.json',{headers:{'Content-Type':'application/json',Accept:'application/json'}}).then(function(res){return res.json();});case 2:abi_SBP=_context.sent;_context.next=5;return fetch('/config/abi_staking.json',{headers:{'Content-Type':'application/json',Accept:'application/json'}}).then(function(res){return res.json();});case 5:abi_staking=_context.sent;_context.next=8;return fetch('/config/config_SBP.json',{headers:{'Content-Type':'application/json',Accept:'application/json'}}).then(function(res){return res.json();});case 8:CONFIG_SBP=_context.sent;_context.next=11;return fetch('/config/config_staking.json',{headers:{'Content-Type':'application/json',Accept:'application/json'}}).then(function(res){return res.json();});case 11:CONFIG_staking=_context.sent;smartContractObj_SBP=new Web3EthContract(abi_SBP,CONFIG_SBP.CONTRACT_ADDRESS);smartContractObj_staking=new Web3EthContract(abi_staking,CONFIG_staking.CONTRACT_ADDRESS);return _context.abrupt(\"return\",{smartContract_SBP:smartContractObj_SBP,smartContract_staking:smartContractObj_staking,web3:web3});case 15:case\"end\":return _context.stop();}}},_callee);}));function fetchContract(){return _fetchContract.apply(this,arguments);}return fetchContract;}(),walletConnect:function(){var _walletConnect=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(){var _yield$ethereum$reque,_yield$ethereum$reque2,accounts,networkId;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:if(!metamaskIsInstalled){_context2.next=24;break;}_context2.prev=1;_context2.next=4;return ethereum.request({method:'eth_requestAccounts'});case 4:_yield$ethereum$reque=_context2.sent;_yield$ethereum$reque2=_slicedToArray(_yield$ethereum$reque,1);accounts=_yield$ethereum$reque2[0];_context2.next=9;return ethereum.request({method:'net_version'});case 9:networkId=_context2.sent;if(!(networkId==CONFIG_staking.NETWORK.ID)){_context2.next=14;break;}return _context2.abrupt(\"return\",accounts);case 14:throw'netErr';case 15:_context2.next=24;break;case 17:_context2.prev=17;_context2.t0=_context2[\"catch\"](1);if(!(_context2.t0==='netErr')){_context2.next=23;break;}throw\"Change network to \".concat(CONFIG_staking.NETWORK.NAME,\".\");case 23:throw new Error('Something went wrong.');case 24:case\"end\":return _context2.stop();}}},_callee2,null,[[1,17]]);}));function walletConnect(){return _walletConnect.apply(this,arguments);}return walletConnect;}(),getTVL:function(){var _getTVL=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(contract){var res;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:_context3.prev=0;_context3.next=3;return contract.StakerTVL().call();case 3:res=_context3.sent;return _context3.abrupt(\"return\",res);case 7:_context3.prev=7;_context3.t0=_context3[\"catch\"](0);throw new Error('Failed Getting Total_Value_Locked !');case 10:case\"end\":return _context3.stop();}}},_callee3,null,[[0,7]]);}));function getTVL(_x){return _getTVL.apply(this,arguments);}return getTVL;}(),approveMaxBalance:function(){var _approveMaxBalance=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(_ref){var contract,stakingAddress,account,res;return _regeneratorRuntime.wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:contract=_ref.contract,stakingAddress=_ref.stakingAddress,account=_ref.account;_context4.prev=1;_context4.next=4;return contract.approveMax(stakingAddress).send({from:account});case 4:res=_context4.sent;return _context4.abrupt(\"return\",res);case 8:_context4.prev=8;_context4.t0=_context4[\"catch\"](1);throw new Error('Failed Getting ApproveMax');case 11:case\"end\":return _context4.stop();}}},_callee4,null,[[1,8]]);}));function approveMaxBalance(_x2){return _approveMaxBalance.apply(this,arguments);}return approveMaxBalance;}(),getAllowance:function(){var _getAllowance=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5(_ref2){var contract,stakingAddress,account,res;return _regeneratorRuntime.wrap(function _callee5$(_context5){while(1){switch(_context5.prev=_context5.next){case 0:contract=_ref2.contract,stakingAddress=_ref2.stakingAddress,account=_ref2.account;_context5.prev=1;console.log('111');_context5.next=5;return contract.allowance(account,stakingAddress).call();case 5:res=_context5.sent;return _context5.abrupt(\"return\",res);case 9:_context5.prev=9;_context5.t0=_context5[\"catch\"](1);throw new Error('Failed Getting Allowance');case 12:case\"end\":return _context5.stop();}}},_callee5,null,[[1,9]]);}));function getAllowance(_x3){return _getAllowance.apply(this,arguments);}return getAllowance;}(),getAccountStakingTotal:function(){var _getAccountStakingTotal=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee6(_ref3){var contract,account,res;return _regeneratorRuntime.wrap(function _callee6$(_context6){while(1){switch(_context6.prev=_context6.next){case 0:contract=_ref3.contract,account=_ref3.account;_context6.prev=1;_context6.next=4;return contract.AccountStakingTotal(account).call();case 4:res=_context6.sent;return _context6.abrupt(\"return\",res);case 8:_context6.prev=8;_context6.t0=_context6[\"catch\"](1);throw new Error('Failed Getting Account Staking Total !');case 11:case\"end\":return _context6.stop();}}},_callee6,null,[[1,8]]);}));function getAccountStakingTotal(_x4){return _getAccountStakingTotal.apply(this,arguments);}return getAccountStakingTotal;}(),getTotalExpectedReward:function(){var _getTotalExpectedReward=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee7(_ref4){var contract,account,res;return _regeneratorRuntime.wrap(function _callee7$(_context7){while(1){switch(_context7.prev=_context7.next){case 0:contract=_ref4.contract,account=_ref4.account;_context7.prev=1;_context7.next=4;return contract.getTotalRewardsExpected(account).call();case 4:res=_context7.sent;return _context7.abrupt(\"return\",res);case 8:_context7.prev=8;_context7.t0=_context7[\"catch\"](1);throw new Error('Failed Getting Account Staking Total !');case 11:case\"end\":return _context7.stop();}}},_callee7,null,[[1,8]]);}));function getTotalExpectedReward(_x5){return _getTotalExpectedReward.apply(this,arguments);}return getTotalExpectedReward;}(),getAccountTier:function(){var _getAccountTier=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee8(_ref5){var contract,account,res;return _regeneratorRuntime.wrap(function _callee8$(_context8){while(1){switch(_context8.prev=_context8.next){case 0:contract=_ref5.contract,account=_ref5.account;_context8.prev=1;_context8.next=4;return contract.AccountTier(account).call();case 4:res=_context8.sent;if(!(res==2)){_context8.next=9;break;}return _context8.abrupt(\"return\",'Silver');case 9:if(!(res==3)){_context8.next=13;break;}return _context8.abrupt(\"return\",'Gold');case 13:if(!(res==4)){_context8.next=17;break;}return _context8.abrupt(\"return\",'Platinum');case 17:if(!(res==5)){_context8.next=21;break;}return _context8.abrupt(\"return\",'Diamond');case 21:return _context8.abrupt(\"return\",'None');case 22:_context8.next=27;break;case 24:_context8.prev=24;_context8.t0=_context8[\"catch\"](1);throw new Error('Failed Getting Accounnt Tier !');case 27:case\"end\":return _context8.stop();}}},_callee8,null,[[1,24]]);}));function getAccountTier(_x6){return _getAccountTier.apply(this,arguments);}return getAccountTier;}(),getSBPBalance:function(){var _getSBPBalance=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee9(_ref6){var contract,account,res;return _regeneratorRuntime.wrap(function _callee9$(_context9){while(1){switch(_context9.prev=_context9.next){case 0:contract=_ref6.contract,account=_ref6.account;_context9.prev=1;_context9.next=4;return contract.balanceOf(account).call();case 4:res=_context9.sent;return _context9.abrupt(\"return\",res);case 8:_context9.prev=8;_context9.t0=_context9[\"catch\"](1);throw new Error('Failed Getting Balance !');case 11:case\"end\":return _context9.stop();}}},_callee9,null,[[1,8]]);}));function getSBPBalance(_x7){return _getSBPBalance.apply(this,arguments);}return getSBPBalance;}(),getPenaltyFee:function(){var _getPenaltyFee=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee10(_ref7){var contract,res;return _regeneratorRuntime.wrap(function _callee10$(_context10){while(1){switch(_context10.prev=_context10.next){case 0:contract=_ref7.contract;_context10.prev=1;_context10.next=4;return contract.getPenaltyFee().call();case 4:res=_context10.sent;return _context10.abrupt(\"return\",res);case 8:_context10.prev=8;_context10.t0=_context10[\"catch\"](1);throw new Error('Failed Getting PenaltyFee');case 11:case\"end\":return _context10.stop();}}},_callee10,null,[[1,8]]);}));function getPenaltyFee(_x8){return _getPenaltyFee.apply(this,arguments);}return getPenaltyFee;}(),getStorageNumbers:function(){var _getStorageNumbers=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee11(_ref8){var contract,res;return _regeneratorRuntime.wrap(function _callee11$(_context11){while(1){switch(_context11.prev=_context11.next){case 0:contract=_ref8.contract;_context11.prev=1;_context11.next=4;return contract.getStorageNumbers().call();case 4:res=_context11.sent;return _context11.abrupt(\"return\",res);case 8:_context11.prev=8;_context11.t0=_context11[\"catch\"](1);throw new Error('Failed Getting Pool Number');case 11:case\"end\":return _context11.stop();}}},_callee11,null,[[1,8]]);}));function getStorageNumbers(_x9){return _getStorageNumbers.apply(this,arguments);}return getStorageNumbers;}(),getPoolInfo:function(){var _getPoolInfo=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee12(_ref9){var contract,storageID,res;return _regeneratorRuntime.wrap(function _callee12$(_context12){while(1){switch(_context12.prev=_context12.next){case 0:contract=_ref9.contract,storageID=_ref9.storageID;_context12.prev=1;_context12.next=4;return contract.storages(storageID).call();case 4:res=_context12.sent;return _context12.abrupt(\"return\",res);case 8:_context12.prev=8;_context12.t0=_context12[\"catch\"](1);throw new Error('Failed Getting Pool Number');case 11:case\"end\":return _context12.stop();}}},_callee12,null,[[1,8]]);}));function getPoolInfo(_x10){return _getPoolInfo.apply(this,arguments);}return getPoolInfo;}(),getStakeIds:function(){var _getStakeIds=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee13(_ref10){var contract,account,res;return _regeneratorRuntime.wrap(function _callee13$(_context13){while(1){switch(_context13.prev=_context13.next){case 0:contract=_ref10.contract,account=_ref10.account;_context13.prev=1;_context13.next=4;return contract.StakeIDs(account).call();case 4:res=_context13.sent;return _context13.abrupt(\"return\",res);case 8:_context13.prev=8;_context13.t0=_context13[\"catch\"](1);throw new Error('Failed Getting StakeIDs');case 11:case\"end\":return _context13.stop();}}},_callee13,null,[[1,8]]);}));function getStakeIds(_x11){return _getStakeIds.apply(this,arguments);}return getStakeIds;}(),getStakedPool:function(){var _getStakedPool=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee14(_ref11){var contract,account,stakeIds,res;return _regeneratorRuntime.wrap(function _callee14$(_context14){while(1){switch(_context14.prev=_context14.next){case 0:contract=_ref11.contract,account=_ref11.account,stakeIds=_ref11.stakeIds;_context14.prev=1;_context14.next=4;return contract.pools(account,stakeIds).call();case 4:res=_context14.sent;return _context14.abrupt(\"return\",res);case 8:_context14.prev=8;_context14.t0=_context14[\"catch\"](1);throw new Error('Faild Getting Pool Info');case 11:case\"end\":return _context14.stop();}}},_callee14,null,[[1,8]]);}));function getStakedPool(_x12){return _getStakedPool.apply(this,arguments);}return getStakedPool;}(),stakeSBP:function(){var _stakeSBP=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee15(_ref12){var contract,amount,storageId,account,res;return _regeneratorRuntime.wrap(function _callee15$(_context15){while(1){switch(_context15.prev=_context15.next){case 0:contract=_ref12.contract,amount=_ref12.amount,storageId=_ref12.storageId,account=_ref12.account;_context15.prev=1;_context15.next=4;return contract.StakeSBP(amount,storageId).send({from:account});case 4:res=_context15.sent;return _context15.abrupt(\"return\",res);case 8:_context15.prev=8;_context15.t0=_context15[\"catch\"](1);throw new Error('Failed Staking SBP');case 11:case\"end\":return _context15.stop();}}},_callee15,null,[[1,8]]);}));function stakeSBP(_x13){return _stakeSBP.apply(this,arguments);}return stakeSBP;}(),unStake:function(){var _unStake=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee16(_ref13){var contract,stakedId,account,res;return _regeneratorRuntime.wrap(function _callee16$(_context16){while(1){switch(_context16.prev=_context16.next){case 0:contract=_ref13.contract,stakedId=_ref13.stakedId,account=_ref13.account;_context16.prev=1;_context16.next=4;return contract.unstakeSBP(stakedId).send({from:account});case 4:res=_context16.sent;return _context16.abrupt(\"return\",res);case 8:_context16.prev=8;_context16.t0=_context16[\"catch\"](1);throw new Error('Failed Claim Reward');case 11:case\"end\":return _context16.stop();}}},_callee16,null,[[1,8]]);}));function unStake(_x14){return _unStake.apply(this,arguments);}return unStake;}(),earlyClaimSBP:function(){var _earlyClaimSBP=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee17(_ref14){var contract,stakedId,account,res;return _regeneratorRuntime.wrap(function _callee17$(_context17){while(1){switch(_context17.prev=_context17.next){case 0:contract=_ref14.contract,stakedId=_ref14.stakedId,account=_ref14.account;_context17.prev=1;_context17.next=4;return contract.earlyClaimSBP(stakedId).send({from:account});case 4:res=_context17.sent;return _context17.abrupt(\"return\",res);case 8:_context17.prev=8;_context17.t0=_context17[\"catch\"](1);throw new Error('Failed Claim Early Reward');case 11:case\"end\":return _context17.stop();}}},_callee17,null,[[1,8]]);}));function earlyClaimSBP(_x15){return _earlyClaimSBP.apply(this,arguments);}return earlyClaimSBP;}(),getStakeStatus:function(){var _getStakeStatus=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee18(_ref15){var contract,stakedId,account;return _regeneratorRuntime.wrap(function _callee18$(_context18){while(1){switch(_context18.prev=_context18.next){case 0:contract=_ref15.contract,stakedId=_ref15.stakedId,account=_ref15.account;_context18.prev=1;_context18.next=4;return contract.StakeStatus(account,stakedId).call();case 4:return _context18.abrupt(\"return\",_context18.sent);case 7:_context18.prev=7;_context18.t0=_context18[\"catch\"](1);throw new Error('Failed get Staking Status');case 10:case\"end\":return _context18.stop();}}},_callee18,null,[[1,7]]);}));function getStakeStatus(_x16){return _getStakeStatus.apply(this,arguments);}return getStakeStatus;}(),getExpectedPoolReward:function(){var _getExpectedPoolReward=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee19(_ref16){var contract,stakedId,account;return _regeneratorRuntime.wrap(function _callee19$(_context19){while(1){switch(_context19.prev=_context19.next){case 0:contract=_ref16.contract,stakedId=_ref16.stakedId,account=_ref16.account;_context19.prev=1;_context19.next=4;return contract.expectedPoolReward(account,stakedId).call();case 4:return _context19.abrupt(\"return\",_context19.sent);case 7:_context19.prev=7;_context19.t0=_context19[\"catch\"](1);throw new Error('Failed get ExpectedPoolReward');case 10:case\"end\":return _context19.stop();}}},_callee19,null,[[1,7]]);}));function getExpectedPoolReward(_x17){return _getExpectedPoolReward.apply(this,arguments);}return getExpectedPoolReward;}()};export default Repository;","map":{"version":3,"sources":["C:/Users/user/Desktop/shibapad_staking-main (2)/shibapad_staking-main/src/store/repository.js"],"names":["Web3","Web3EthContract","window","ethereum","metamaskIsInstalled","isMetaMask","web3","abi_SBP","abi_staking","CONFIG_SBP","CONFIG_staking","setProvider","Repository","fetchContract","fetch","headers","Accept","then","res","json","smartContractObj_SBP","CONTRACT_ADDRESS","smartContractObj_staking","smartContract_SBP","smartContract_staking","walletConnect","request","method","accounts","networkId","NETWORK","ID","NAME","Error","getTVL","contract","StakerTVL","call","approveMaxBalance","stakingAddress","account","approveMax","send","from","getAllowance","console","log","allowance","getAccountStakingTotal","AccountStakingTotal","getTotalExpectedReward","getTotalRewardsExpected","getAccountTier","AccountTier","getSBPBalance","balanceOf","getPenaltyFee","getStorageNumbers","getPoolInfo","storageID","storages","getStakeIds","StakeIDs","getStakedPool","stakeIds","pools","stakeSBP","amount","storageId","StakeSBP","unStake","stakedId","unstakeSBP","earlyClaimSBP","getStakeStatus","StakeStatus","getExpectedPoolReward","expectedPoolReward"],"mappings":"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","sourcesContent":["import Web3 from 'web3';\nimport Web3EthContract from 'web3-eth-contract';\nconst { ethereum } = window;\n\nconst metamaskIsInstalled = ethereum && ethereum.isMetaMask;\nlet web3;\nlet abi_SBP;\nlet abi_staking;\nlet CONFIG_SBP;\nlet CONFIG_staking;\nif (metamaskIsInstalled) {\n  Web3EthContract.setProvider(ethereum);\n  web3 = new Web3(ethereum);\n}\n\nconst Repository = {\n  fetchContract: async () => {\n    abi_SBP = await fetch('/config/abi_SBP.json', {\n      headers: {\n        'Content-Type': 'application/json',\n        Accept: 'application/json',\n      },\n    }).then(res => {\n      return res.json();\n    });\n    abi_staking = await fetch('/config/abi_staking.json', {\n      headers: {\n        'Content-Type': 'application/json',\n        Accept: 'application/json',\n      },\n    }).then(res => {\n      return res.json();\n    });\n    CONFIG_SBP = await fetch('/config/config_SBP.json', {\n      headers: {\n        'Content-Type': 'application/json',\n        Accept: 'application/json',\n      },\n    }).then(res => {\n      return res.json();\n    });\n    CONFIG_staking = await fetch('/config/config_staking.json', {\n      headers: {\n        'Content-Type': 'application/json',\n        Accept: 'application/json',\n      },\n    }).then(res => {\n      return res.json();\n    });\n    const smartContractObj_SBP = new Web3EthContract(\n      abi_SBP,\n      CONFIG_SBP.CONTRACT_ADDRESS,\n    );\n    const smartContractObj_staking = new Web3EthContract(\n      abi_staking,\n      CONFIG_staking.CONTRACT_ADDRESS,\n    );\n    return {\n      smartContract_SBP: smartContractObj_SBP,\n      smartContract_staking: smartContractObj_staking,\n      web3: web3,\n    };\n  },\n\n  walletConnect: async () => {\n    if (metamaskIsInstalled) {\n      try {\n        const [accounts] = await ethereum.request({\n          method: 'eth_requestAccounts',\n        });\n        const networkId = await ethereum.request({\n          method: 'net_version',\n        });\n        if (networkId == CONFIG_staking.NETWORK.ID) {\n          return accounts;\n\n          // Add listeners end\n        } else {\n          throw 'netErr';\n        }\n      } catch (err) {\n        if (err === 'netErr')\n          throw `Change network to ${CONFIG_staking.NETWORK.NAME}.`;\n        else throw new Error('Something went wrong.');\n      }\n    }\n  },\n  getTVL: async contract => {\n    try {\n      const res = await contract.StakerTVL().call();\n      return res;\n    } catch (err) {\n      throw new Error('Failed Getting Total_Value_Locked !');\n    }\n  },\n  approveMaxBalance: async ({ contract, stakingAddress, account }) => {\n    try {\n      const res = await contract.approveMax(stakingAddress).send({\n        from: account,\n      });\n      return res;\n    } catch (err) {\n      throw new Error('Failed Getting ApproveMax');\n    }\n  },\n  getAllowance: async ({ contract, stakingAddress, account }) => {\n    try {\n      console.log('111');\n      const res = await contract.allowance(account, stakingAddress).call();\n      return res;\n    } catch (err) {\n      throw new Error('Failed Getting Allowance');\n    }\n  },\n  getAccountStakingTotal: async ({ contract, account }) => {\n    try {\n      const res = await contract.AccountStakingTotal(account).call();\n      return res;\n    } catch (err) {\n      throw new Error('Failed Getting Account Staking Total !');\n    }\n  },\n  getTotalExpectedReward: async ({ contract, account }) => {\n    try {\n      const res = await contract.getTotalRewardsExpected(account).call();\n      return res;\n    } catch (err) {\n      throw new Error('Failed Getting Account Staking Total !');\n    }\n  },\n  getAccountTier: async ({ contract, account }) => {\n    try {\n      const res = await contract.AccountTier(account).call();\n      if (res==2) {\n        return 'Silver';\n      } else if (res==3){\n        return 'Gold'\n      } else if (res==4){\n        return 'Platinum'\n      } else if (res==5){\n        return 'Diamond'\n      } else { return 'None'}\n    } catch (err) {\n      throw new Error('Failed Getting Accounnt Tier !');\n    }\n  },\n  getSBPBalance: async ({ contract, account }) => {\n    try {\n      const res = await contract.balanceOf(account).call();\n      return res;\n    } catch (err) {\n      throw new Error('Failed Getting Balance !');\n    }\n  },\n  getPenaltyFee: async ({ contract }) => {\n    try {\n      const res = await contract.getPenaltyFee().call();\n      // console.log(res);\n      return res;\n    } catch (err) {\n      throw new Error('Failed Getting PenaltyFee');\n    }\n  },\n  getStorageNumbers: async ({ contract }) => {\n    try {\n      const res = await contract.getStorageNumbers().call();\n      // console.log('storageNum: ', res);\n      return res;\n    } catch (err) {\n      throw new Error('Failed Getting Pool Number');\n    }\n  },\n  getPoolInfo: async ({ contract, storageID }) => {\n    try {\n      const res = await contract.storages(storageID).call();\n      return res;\n    } catch (err) {\n      throw new Error('Failed Getting Pool Number');\n    }\n  },\n  getStakeIds: async ({ contract, account }) => {\n    try {\n      const res = await contract.StakeIDs(account).call();\n      return res;\n    } catch (err) {\n      throw new Error('Failed Getting StakeIDs');\n    }\n  },\n  getStakedPool: async ({ contract, account, stakeIds }) => {\n    try {\n      const res = await contract.pools(account, stakeIds).call();\n      return res;\n    } catch (err) {\n      throw new Error('Faild Getting Pool Info');\n    }\n  },\n  stakeSBP: async ({ contract, amount, storageId, account }) => {\n    try {\n      const res = await contract.StakeSBP(amount, storageId).send({\n        from: account,\n      });\n      // console.log('res', res);\n      return res;\n    } catch (err) {\n      throw new Error('Failed Staking SBP');\n    }\n  },\n  unStake: async ({ contract, stakedId, account }) => {\n    try {\n      const res = await contract.unstakeSBP(stakedId).send({\n        from: account,\n      });\n      // console.log('unstakeSBP', res);\n      return res;\n    } catch (err) {\n      throw new Error('Failed Claim Reward');\n    }\n  },\n  earlyClaimSBP: async ({ contract, stakedId, account }) => {\n    try {\n      const res = await contract.earlyClaimSBP(stakedId).send({\n        from: account,\n      });\n      // console.log('earlyClaimSBP', res);\n      return res;\n    } catch (err) {\n      throw new Error('Failed Claim Early Reward');\n    }\n  },\n  getStakeStatus: async ({ contract, stakedId, account }) => {\n    try {\n      return await contract.StakeStatus(account, stakedId).call();\n    } catch (err) {\n      throw new Error('Failed get Staking Status');\n    }\n  },\n  getExpectedPoolReward: async ({ contract, stakedId, account }) => {\n    try {\n      return await contract.expectedPoolReward(account, stakedId).call();\n    } catch (err) {\n      throw new Error('Failed get ExpectedPoolReward');\n    }\n  },\n};\n\nexport default Repository;\n"]},"metadata":{},"sourceType":"module"}