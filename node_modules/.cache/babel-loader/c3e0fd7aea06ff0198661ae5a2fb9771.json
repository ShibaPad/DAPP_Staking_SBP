{"ast":null,"code":"import Web3 from 'web3';\nimport Web3EthContract from 'web3-eth-contract';\nconst {\n  ethereum\n} = window;\nconst metamaskIsInstalled = ethereum && ethereum.isMetaMask;\nlet web3;\nlet abi_SBP;\nlet abi_staking;\nlet CONFIG_SBP;\nlet CONFIG_staking;\n\nif (metamaskIsInstalled) {\n  Web3EthContract.setProvider(ethereum);\n  web3 = new Web3(ethereum);\n}\n\nconst Repository = {\n  fetchContract: async () => {\n    abi_SBP = await fetch('/config/abi_SBP.json', {\n      headers: {\n        'Content-Type': 'application/json',\n        Accept: 'application/json'\n      }\n    }).then(res => {\n      return res.json();\n    });\n    abi_staking = await fetch('/config/abi_staking.json', {\n      headers: {\n        'Content-Type': 'application/json',\n        Accept: 'application/json'\n      }\n    }).then(res => {\n      return res.json();\n    });\n    CONFIG_SBP = await fetch('/config/config_SBP.json', {\n      headers: {\n        'Content-Type': 'application/json',\n        Accept: 'application/json'\n      }\n    }).then(res => {\n      return res.json();\n    });\n    CONFIG_staking = await fetch('/config/config_staking.json', {\n      headers: {\n        'Content-Type': 'application/json',\n        Accept: 'application/json'\n      }\n    }).then(res => {\n      return res.json();\n    });\n    const smartContractObj_SBP = new Web3EthContract(abi_SBP, CONFIG_SBP.CONTRACT_ADDRESS);\n    const smartContractObj_staking = new Web3EthContract(abi_staking, CONFIG_staking.CONTRACT_ADDRESS);\n    return {\n      smartContract_SBP: smartContractObj_SBP,\n      smartContract_staking: smartContractObj_staking,\n      web3: web3\n    };\n  },\n  walletConnect: async () => {\n    if (metamaskIsInstalled) {\n      try {\n        const [accounts] = await ethereum.request({\n          method: 'eth_requestAccounts'\n        });\n        const networkId = await ethereum.request({\n          method: 'net_version'\n        });\n\n        if (networkId == CONFIG_staking.NETWORK.ID) {\n          return accounts; // Add listeners end\n        } else {\n          throw 'netErr';\n        }\n      } catch (err) {\n        if (err === 'netErr') throw `Change network to ${CONFIG_staking.NETWORK.NAME}.`;else throw new Error('Something went wrong.');\n      }\n    }\n  },\n  getTVL: async contract => {\n    try {\n      const res = await contract.StakerTVL().call();\n      return res;\n    } catch (err) {\n      throw new Error('Failed Getting Total_Value_Locked !');\n    }\n  },\n  getAccountStakingTotal: async _ref => {\n    let {\n      contract,\n      account\n    } = _ref;\n\n    try {\n      const res = await contract.AccountStakingTotal(account).call();\n      return res;\n    } catch (err) {\n      throw new Error('Failed Getting Account Staking Total !');\n    }\n  },\n  getTotalExpectedReward: async _ref2 => {\n    let {\n      contract,\n      account\n    } = _ref2;\n\n    try {\n      const res = await contract.getTotalRewardsExpected(account).call();\n      return res;\n    } catch (err) {\n      throw new Error('Failed Getting Account Staking Total !');\n    }\n  },\n  getAccountTier: async _ref3 => {\n    let {\n      contract,\n      account\n    } = _ref3;\n\n    try {\n      const res = await contract.AccountTier(account).call();\n      return res;\n    } catch (err) {\n      throw new Error('Failed Getting Accounnt Tier !');\n    }\n  },\n  getSBPBalance: async _ref4 => {\n    let {\n      contract,\n      account\n    } = _ref4;\n\n    try {\n      const res = await contract.balanceOf(account).call();\n      return res;\n    } catch (err) {\n      throw new Error('Failed Getting Balance !');\n    }\n  },\n  getPenaltyFee: async _ref5 => {\n    let {\n      contract\n    } = _ref5;\n\n    try {\n      const res = await contract.getPenaltyFee().call(); // console.log(res);\n\n      return res;\n    } catch (err) {\n      throw new Error('Failed Getting PenaltyFee');\n    }\n  },\n  getStorageNumbers: async _ref6 => {\n    let {\n      contract\n    } = _ref6;\n\n    try {\n      const res = await contract.getStorageNumbers().call(); // console.log('storageNum: ', res);\n\n      return res;\n    } catch (err) {\n      throw new Error('Failed Getting Pool Number');\n    }\n  },\n  getPoolInfo: async _ref7 => {\n    let {\n      contract,\n      storageID\n    } = _ref7;\n\n    try {\n      const res = await contract.storages(storageID).call();\n      return res;\n    } catch (err) {\n      throw new Error('Failed Getting Pool Number');\n    }\n  },\n  getStakeIds: async _ref8 => {\n    let {\n      contract,\n      account\n    } = _ref8;\n\n    try {\n      const res = await contract.StakeIDs(account).call();\n      return res;\n    } catch (err) {\n      throw new Error('Failed Getting StakeIDs');\n    }\n  },\n  getStakedPool: async _ref9 => {\n    let {\n      contract,\n      account,\n      stakeIds\n    } = _ref9;\n\n    try {\n      const res = await contract.pools(account, stakeIds).call();\n      return res;\n    } catch (err) {\n      throw new Error('Faild Getting Pool Info');\n    }\n  },\n  approveMax: async _ref10 => {\n    let {\n      account\n    } = _ref10;\n\n    try {\n      const res = await CONFIG_SBP.CONTRACT_ADDRESS.approveMax(CONFIG_staking.CONTRACT_ADDRESS).send({\n        from: account,\n        to: CONFIG_SBP.CONTRACT_ADDRESS\n      }); // console.log('res', res);\n\n      return res;\n    } catch (err) {\n      throw new Error('Failed Staking SBP');\n    }\n  },\n  stakeSBP: async _ref11 => {\n    let {\n      contract,\n      amount,\n      storageId,\n      account\n    } = _ref11;\n\n    try {\n      const res = await contract.StakeSBP(amount, storageId).send({\n        from: account,\n        to: CONFIG_staking.CONTRACT_ADDRESS\n      }); // console.log('res', res);\n\n      return res;\n    } catch (err) {\n      throw new Error('Failed Staking SBP');\n    }\n  },\n  unStake: async _ref12 => {\n    let {\n      contract,\n      stakedId,\n      account\n    } = _ref12;\n\n    try {\n      const res = await contract.unstakeSBP(stakedId).send({\n        from: account,\n        to: CONFIG_staking.CONTRACT_ADDRESS\n      }); // console.log('unstakeSBP', res);\n\n      return res;\n    } catch (err) {\n      throw new Error('Failed Claim Reward');\n    }\n  },\n  earlyClaimSBP: async _ref13 => {\n    let {\n      contract,\n      stakedId,\n      account\n    } = _ref13;\n\n    try {\n      const res = await contract.earlyClaimSBP(stakedId).send({\n        from: account\n      }); // console.log('earlyClaimSBP', res);\n\n      return res;\n    } catch (err) {\n      throw new Error('Failed Claim Early Reward');\n    }\n  },\n  getStakeStatus: async _ref14 => {\n    let {\n      contract,\n      stakedId,\n      account\n    } = _ref14;\n\n    try {\n      return await contract.StakeStatus(account, stakedId).call();\n    } catch (err) {\n      throw new Error('Failed get Staking Status');\n    }\n  },\n  getExpectedPoolReward: async _ref15 => {\n    let {\n      contract,\n      stakedId,\n      account\n    } = _ref15;\n\n    try {\n      return await contract.expectedPoolReward(account, stakedId).call();\n    } catch (err) {\n      throw new Error('Failed get ExpectedPoolReward');\n    }\n  }\n};\nexport default Repository;","map":{"version":3,"sources":["C:/Users/user/Desktop/shibapad_staking-main (2)/shibapad_staking-main/src/store/repository.js"],"names":["Web3","Web3EthContract","ethereum","window","metamaskIsInstalled","isMetaMask","web3","abi_SBP","abi_staking","CONFIG_SBP","CONFIG_staking","setProvider","Repository","fetchContract","fetch","headers","Accept","then","res","json","smartContractObj_SBP","CONTRACT_ADDRESS","smartContractObj_staking","smartContract_SBP","smartContract_staking","walletConnect","accounts","request","method","networkId","NETWORK","ID","err","NAME","Error","getTVL","contract","StakerTVL","call","getAccountStakingTotal","account","AccountStakingTotal","getTotalExpectedReward","getTotalRewardsExpected","getAccountTier","AccountTier","getSBPBalance","balanceOf","getPenaltyFee","getStorageNumbers","getPoolInfo","storageID","storages","getStakeIds","StakeIDs","getStakedPool","stakeIds","pools","approveMax","send","from","to","stakeSBP","amount","storageId","StakeSBP","unStake","stakedId","unstakeSBP","earlyClaimSBP","getStakeStatus","StakeStatus","getExpectedPoolReward","expectedPoolReward"],"mappings":"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","sourcesContent":["import Web3 from 'web3';\nimport Web3EthContract from 'web3-eth-contract';\nconst { ethereum } = window;\n\nconst metamaskIsInstalled = ethereum && ethereum.isMetaMask;\nlet web3;\nlet abi_SBP;\nlet abi_staking;\nlet CONFIG_SBP;\nlet CONFIG_staking;\nif (metamaskIsInstalled) {\n  Web3EthContract.setProvider(ethereum);\n  web3 = new Web3(ethereum);\n}\n\nconst Repository = {\n  fetchContract: async () => {\n    abi_SBP = await fetch('/config/abi_SBP.json', {\n      headers: {\n        'Content-Type': 'application/json',\n        Accept: 'application/json',\n      },\n    }).then(res => {\n      return res.json();\n    });\n    abi_staking = await fetch('/config/abi_staking.json', {\n      headers: {\n        'Content-Type': 'application/json',\n        Accept: 'application/json',\n      },\n    }).then(res => {\n      return res.json();\n    });\n    CONFIG_SBP = await fetch('/config/config_SBP.json', {\n      headers: {\n        'Content-Type': 'application/json',\n        Accept: 'application/json',\n      },\n    }).then(res => {\n      return res.json();\n    });\n    CONFIG_staking = await fetch('/config/config_staking.json', {\n      headers: {\n        'Content-Type': 'application/json',\n        Accept: 'application/json',\n      },\n    }).then(res => {\n      return res.json();\n    });\n    const smartContractObj_SBP = new Web3EthContract(\n      abi_SBP,\n      CONFIG_SBP.CONTRACT_ADDRESS,\n    );\n    const smartContractObj_staking = new Web3EthContract(\n      abi_staking,\n      CONFIG_staking.CONTRACT_ADDRESS,\n    );\n    return {\n      smartContract_SBP: smartContractObj_SBP,\n      smartContract_staking: smartContractObj_staking,\n      web3: web3,\n    };\n  },\n\n  walletConnect: async () => {\n    if (metamaskIsInstalled) {\n      try {\n        const [accounts] = await ethereum.request({\n          method: 'eth_requestAccounts',\n        });\n        const networkId = await ethereum.request({\n          method: 'net_version',\n        });\n        if (networkId == CONFIG_staking.NETWORK.ID) {\n          return accounts;\n\n          // Add listeners end\n        } else {\n          throw 'netErr';\n        }\n      } catch (err) {\n        if (err === 'netErr')\n          throw `Change network to ${CONFIG_staking.NETWORK.NAME}.`;\n        else throw new Error('Something went wrong.');\n      }\n    }\n  },\n  getTVL: async contract => {\n    try {\n      const res = await contract.StakerTVL().call();\n      return res;\n    } catch (err) {\n      throw new Error('Failed Getting Total_Value_Locked !');\n    }\n  },\n  getAccountStakingTotal: async ({ contract, account }) => {\n    try {\n      const res = await contract.AccountStakingTotal(account).call();\n      return res;\n    } catch (err) {\n      throw new Error('Failed Getting Account Staking Total !');\n    }\n  },\n  getTotalExpectedReward: async ({ contract, account }) => {\n    try {\n      const res = await contract.getTotalRewardsExpected(account).call();\n      return res;\n    } catch (err) {\n      throw new Error('Failed Getting Account Staking Total !');\n    }\n  },\n  getAccountTier: async ({ contract, account }) => {\n    try {\n      const res = await contract.AccountTier(account).call();\n      return res;\n    } catch (err) {\n      throw new Error('Failed Getting Accounnt Tier !');\n    }\n  },\n  getSBPBalance: async ({ contract, account }) => {\n    try {\n      const res = await contract.balanceOf(account).call();\n      return res;\n    } catch (err) {\n      throw new Error('Failed Getting Balance !');\n    }\n  },\n  getPenaltyFee: async ({ contract }) => {\n    try {\n      const res = await contract.getPenaltyFee().call();\n      // console.log(res);\n      return res;\n    } catch (err) {\n      throw new Error('Failed Getting PenaltyFee');\n    }\n  },\n  getStorageNumbers: async ({ contract }) => {\n    try {\n      const res = await contract.getStorageNumbers().call();\n      // console.log('storageNum: ', res);\n      return res;\n    } catch (err) {\n      throw new Error('Failed Getting Pool Number');\n    }\n  },\n  getPoolInfo: async ({ contract, storageID }) => {\n    try {\n      const res = await contract.storages(storageID).call();\n      return res;\n    } catch (err) {\n      throw new Error('Failed Getting Pool Number');\n    }\n  },\n  getStakeIds: async ({ contract, account }) => {\n    try {\n      const res = await contract.StakeIDs(account).call();\n      return res;\n    } catch (err) {\n      throw new Error('Failed Getting StakeIDs');\n    }\n  },\n  getStakedPool: async ({ contract, account, stakeIds }) => {\n    try {\n      const res = await contract.pools(account, stakeIds).call();\n      return res;\n    } catch (err) {\n      throw new Error('Faild Getting Pool Info');\n    }\n  },\n  approveMax: async ({ account }) => {\n    try {\n      const res = await CONFIG_SBP.CONTRACT_ADDRESS.approveMax(CONFIG_staking.CONTRACT_ADDRESS).send({\n        from: account, to: CONFIG_SBP.CONTRACT_ADDRESS,\n      });\n      // console.log('res', res);\n      return res;\n    } catch (err) {\n      throw new Error('Failed Staking SBP');\n    }\n  },\n  stakeSBP: async ({ contract, amount, storageId, account }) => {\n    try {\n      const res = await contract.StakeSBP(amount, storageId).send({\n        from: account, to: CONFIG_staking.CONTRACT_ADDRESS,\n      });\n      // console.log('res', res);\n      return res;\n    } catch (err) {\n      throw new Error('Failed Staking SBP');\n    }\n  },\n  unStake: async ({ contract, stakedId, account }) => {\n    try {\n      const res = await contract.unstakeSBP(stakedId).send({\n        from: account, to: CONFIG_staking.CONTRACT_ADDRESS,\n      });\n      // console.log('unstakeSBP', res);\n      return res;\n    } catch (err) {\n      throw new Error('Failed Claim Reward');\n    }\n  },\n  earlyClaimSBP: async ({ contract, stakedId, account }) => {\n    try {\n      const res = await contract.earlyClaimSBP(stakedId).send({\n        from: account,\n      });\n      // console.log('earlyClaimSBP', res);\n      return res;\n    } catch (err) {\n      throw new Error('Failed Claim Early Reward');\n    }\n  },\n  getStakeStatus: async ({ contract, stakedId, account }) => {\n    try {\n      return await contract.StakeStatus(account, stakedId).call();\n    } catch (err) {\n      throw new Error('Failed get Staking Status');\n    }\n  },\n  getExpectedPoolReward: async ({ contract, stakedId, account }) => {\n    try {\n      return await contract.expectedPoolReward(account, stakedId).call();\n    } catch (err) {\n      throw new Error('Failed get ExpectedPoolReward');\n    }\n  },\n};\n\nexport default Repository;\n"]},"metadata":{},"sourceType":"module"}