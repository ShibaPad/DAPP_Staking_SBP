{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\Desktop\\\\shibapad_staking-main (2)\\\\shibapad_staking-main\\\\src\\\\component\\\\StakingInfoBox.js\";\nimport React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { Text } from './style';\nimport moment from 'moment';\nimport { useObserver } from 'mobx-react';\nimport Store from '../store/store';\n\nconst handleButtonType = mode => {\n  switch (mode) {\n    case 'disable':\n      return 'border: solid 2px #757575; background-color: #74564a; color: #757575';\n\n    case 'claim':\n      return 'border: solid 2px #d5ccc8; background-color: #66ac5b; color: #fff;';\n\n    case 'emergencyClaim':\n      return 'border: solid 2px #eb5757; background-color: #757575; color: #eb5757;';\n  }\n}; // const isClaimable = date => {\n//   // const nowUTC = moment().utc().format('MM/DD/YYYY HH:mm:ss');\n//   // const releaseDate = date.split(' ').slice(0, -1).toString().replace(',', ' ');\n//   // return new Date(nowUTC) >= new Date(releaseDate);\n//   return true;\n// };\n\n\nconst timeStampConvertor = date => {\n  return moment(new Date(date * 1000)).utc().format('MM/DD/YYYY HH:mm:ss');\n};\n\nconst StakingInfoBox = _ref => {\n  let {\n    stakingInfo,\n    handleClaim\n  } = _ref;\n  const {\n    stakingId,\n    amount,\n    releaseDate\n  } = stakingInfo;\n  const [disable, setDisable] = useState(false);\n  const [expectedReward, setExpectedReward] = useState('');\n  useEffect(() => {\n    Store.getStakeStatus(stakingId).then(res => {\n      if (res) {\n        if (res[2]) {\n          // 미 도래 시점, emergency\n          setDisable(true);\n        } else {\n          setDisable(false);\n        }\n      }\n    }, []);\n    Store.getExpectedPoolReward(stakingId).then(res => {\n      if (res) setExpectedReward(res);\n    });\n  }, []); // needs setDisable logic\n\n  return useObserver(() => {\n    return /*#__PURE__*/React.createElement(StakingContainer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(StakingID, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Text, {\n      color: \"#74564a\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 11\n      }\n    }, \"Staking ID : #\", stakingId)), /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Text, {\n      color: \"#fff\",\n      width: \"10rem\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 11\n      }\n    }, \"Staking Amount:\", ' '), /*#__PURE__*/React.createElement(Text, {\n      color: \"#f6c179\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 11\n      }\n    }, amount / 10 ** 18, \" SBP\")), /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Text, {\n      color: \"#fff\",\n      width: \"10rem\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 11\n      }\n    }, \"Estimated Reward :\", ' '), /*#__PURE__*/React.createElement(Text, {\n      color: \"#f6c179\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 11\n      }\n    }, expectedReward / 10 ** 18, \" SBP\")), /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Text, {\n      color: \"#fff\",\n      width: \"10rem\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 11\n      }\n    }, \"Your Estimated Total :\", ' '), /*#__PURE__*/React.createElement(Text, {\n      color: \"#f6c179\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 11\n      }\n    }, (amount + expectedReward) / 10 ** 18, \" SBP\")), /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Text, {\n      color: \"#fff\",\n      width: \"10rem\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 11\n      }\n    }, \"Release at :\", ' '), /*#__PURE__*/React.createElement(Text, {\n      color: disable ? '#66ac5b' : '#eb5757',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 11\n      }\n    }, timeStampConvertor(releaseDate), \" UTC\")), /*#__PURE__*/React.createElement(ButtonWrapper, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(ClaimButton, {\n      mode: disable ? 'claim' : 'disable',\n      disabled: !disable,\n      onClick: () => handleClaim({\n        stakingId: stakingId,\n        type: 'claim'\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 11\n      }\n    }, \"Claim\"), /*#__PURE__*/React.createElement(ClaimButton, {\n      mode: !disable ? 'emergencyClaim' : 'disable',\n      disabled: disable,\n      onClick: () => handleClaim({\n        stakingId: stakingId,\n        type: 'emergencyClaim'\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 11\n      }\n    }, \"EmergencyClaim\")));\n  });\n};\n\nexport default StakingInfoBox;\nconst StakingContainer = styled.div`\n  /* height: 160px; */\n  flex-grow: 0;\n  border-radius: 15px;\n  background-color: #74564a;\n  margin: 0 1rem 1rem 1rem;\n`;\nconst StakingID = styled.div`\n  margin: 1rem 0 0;\n  padding-left: 1.5rem;\n  width: 10rem;\n  height: 1.8rem;\n  background-color: #f6c179;\n  line-height: 2rem;\n  @media (max-width: 425px) {\n    height: 1.2rem;\n    line-height: 1rem;\n  }\n`;\nconst Row = styled.div`\n  padding: 0.25rem 0 0.25rem 1.5rem; ;\n`;\nconst ButtonWrapper = styled.div`\n  padding: 0.25rem 1.5rem 0.25rem 1.5rem;\n  display: flex;\n  justify-content: center;\n`;\nconst ClaimButton = styled.button`\n  //:disabled, claim, emergencyClaim\n  font-family: Teko;\n  font-size: 1rem;\n  font-weight: 500;\n  font-stretch: normal;\n  font-style: normal;\n  line-height: 1.75;\n  margin: 0.7rem;\n  width: 10rem;\n  height: 2rem;\n  border-radius: 15px;\n  border: solid 2px #d5ccc8;\n  ${props => handleButtonType(props.mode)}\n`;","map":{"version":3,"sources":["C:/Users/user/Desktop/shibapad_staking-main (2)/shibapad_staking-main/src/component/StakingInfoBox.js"],"names":["React","useState","useEffect","styled","Text","moment","useObserver","Store","handleButtonType","mode","timeStampConvertor","date","Date","utc","format","StakingInfoBox","stakingInfo","handleClaim","stakingId","amount","releaseDate","disable","setDisable","expectedReward","setExpectedReward","getStakeStatus","then","res","getExpectedPoolReward","type","StakingContainer","div","StakingID","Row","ButtonWrapper","ClaimButton","button","props"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { Text } from './style';\nimport moment from 'moment';\nimport { useObserver } from 'mobx-react';\nimport Store from '../store/store';\nconst handleButtonType = mode => {\n  switch (mode) {\n    case 'disable':\n      return 'border: solid 2px #757575; background-color: #74564a; color: #757575';\n    case 'claim':\n      return 'border: solid 2px #d5ccc8; background-color: #66ac5b; color: #fff;';\n    case 'emergencyClaim':\n      return 'border: solid 2px #eb5757; background-color: #757575; color: #eb5757;';\n  }\n};\n// const isClaimable = date => {\n//   // const nowUTC = moment().utc().format('MM/DD/YYYY HH:mm:ss');\n//   // const releaseDate = date.split(' ').slice(0, -1).toString().replace(',', ' ');\n//   // return new Date(nowUTC) >= new Date(releaseDate);\n//   return true;\n// };\nconst timeStampConvertor = date => {\n  return moment(new Date(date * 1000))\n    .utc()\n    .format('MM/DD/YYYY HH:mm:ss');\n};\nconst StakingInfoBox = ({ stakingInfo, handleClaim }) => {\n  const { stakingId, amount, releaseDate } = stakingInfo;\n  const [disable, setDisable] = useState(false);\n  const [expectedReward, setExpectedReward] = useState('');\n  useEffect(() => {\n    Store.getStakeStatus(stakingId).then(res => {\n      if (res) {\n        if (res[2]) {\n          // 미 도래 시점, emergency\n          setDisable(true);\n        } else {\n          setDisable(false);\n        }\n      }\n    }, []);\n    Store.getExpectedPoolReward(stakingId).then(res => {\n      if (res) setExpectedReward(res);\n    });\n  }, []);\n  // needs setDisable logic\n\n  return useObserver(() => {\n    return (\n      <StakingContainer>\n        <StakingID>\n          <Text color=\"#74564a\">Staking ID : #{stakingId}</Text>\n        </StakingID>\n        <Row>\n          <Text color=\"#fff\" width=\"10rem\">\n            Staking Amount:{' '}\n          </Text>\n          <Text color=\"#f6c179\">{amount/10**18} SBP</Text>\n        </Row>\n        <Row>\n          <Text color=\"#fff\" width=\"10rem\">\n            Estimated Reward :{' '}\n          </Text>\n          <Text color=\"#f6c179\">{expectedReward/10**18} SBP</Text>\n        </Row>\n        <Row>\n          <Text color=\"#fff\" width=\"10rem\">\n            Your Estimated Total :{' '}\n          </Text>\n          <Text color=\"#f6c179\">{(amount+expectedReward)/10**18} SBP</Text>\n        </Row>\n        <Row>\n          <Text color=\"#fff\" width=\"10rem\">\n            Release at :{' '}\n          </Text>\n          <Text color={disable ? '#66ac5b' : '#eb5757'}>\n            {timeStampConvertor(releaseDate)} UTC\n          </Text>\n        </Row>\n        <ButtonWrapper>\n          <ClaimButton\n            mode={disable ? 'claim' : 'disable'}\n            disabled={!disable}\n            onClick={() => handleClaim({ stakingId: stakingId, type: 'claim' })}\n          >\n            Claim\n          </ClaimButton>\n          <ClaimButton\n            mode={!disable ? 'emergencyClaim' : 'disable'}\n            disabled={disable}\n            onClick={() =>\n              handleClaim({ stakingId: stakingId, type: 'emergencyClaim' })\n            }\n          >\n            EmergencyClaim\n          </ClaimButton>\n        </ButtonWrapper>\n      </StakingContainer>\n    );\n  });\n};\n\nexport default StakingInfoBox;\n\nconst StakingContainer = styled.div`\n  /* height: 160px; */\n  flex-grow: 0;\n  border-radius: 15px;\n  background-color: #74564a;\n  margin: 0 1rem 1rem 1rem;\n`;\n\nconst StakingID = styled.div`\n  margin: 1rem 0 0;\n  padding-left: 1.5rem;\n  width: 10rem;\n  height: 1.8rem;\n  background-color: #f6c179;\n  line-height: 2rem;\n  @media (max-width: 425px) {\n    height: 1.2rem;\n    line-height: 1rem;\n  }\n`;\n\nconst Row = styled.div`\n  padding: 0.25rem 0 0.25rem 1.5rem; ;\n`;\n\nconst ButtonWrapper = styled.div`\n  padding: 0.25rem 1.5rem 0.25rem 1.5rem;\n  display: flex;\n  justify-content: center;\n`;\n\nconst ClaimButton = styled.button`\n  //:disabled, claim, emergencyClaim\n  font-family: Teko;\n  font-size: 1rem;\n  font-weight: 500;\n  font-stretch: normal;\n  font-style: normal;\n  line-height: 1.75;\n  margin: 0.7rem;\n  width: 10rem;\n  height: 2rem;\n  border-radius: 15px;\n  border: solid 2px #d5ccc8;\n  ${props => handleButtonType(props.mode)}\n`;\n"]},"metadata":{},"sourceType":"module"}