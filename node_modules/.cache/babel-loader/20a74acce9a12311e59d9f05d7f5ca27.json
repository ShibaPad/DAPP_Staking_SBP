{"ast":null,"code":"import { observable } from 'mobx';\nimport Repository from './repository';\nconst {\n  ethereum\n} = window;\nconst Store = observable({\n  account: null,\n  stakingContract: null,\n  //SHIBA STAKING SMART CONTRACT\n  SBPContract: null,\n  // $SBP SMART CONTRACT\n  web3: null,\n  stakingInfo: {\n    TVL: '',\n    // total value locked\n    accountStakingTotal: 0,\n    // Your SBPS in Staking\n    totalExpectedReward: 0,\n    // Total Expected Reward\n    tier: '',\n    // Account Tier\n    SBPBalance: 0,\n    // Account $SBP Balance\n    allowance: 0\n  },\n  stakingPool: [],\n  //Staking Pools\n  stakeIDs: [],\n  // StakeIDs of Account\n  stakedPools: [],\n  //Staked Pool of Account\n  paneltyFee: 0,\n  // Panelty Fee\n  liqfee: 0,\n\n  async fetchContract() {\n    try {\n      await Repository.fetchContract().then(res => {\n        if (res) {\n          const {\n            smartContract_SBP,\n            smartContract_staking,\n            web3\n          } = res;\n          this.stakingContract = smartContract_staking;\n          this.SBPContract = smartContract_SBP;\n          this.web3 = web3;\n        }\n      });\n      return true;\n    } catch (err) {// console.log('err: ', err);\n    }\n  },\n\n  async connectWallet() {\n    try {\n      await Repository.walletConnect().then(res => {\n        if (res) {\n          this.account = res;\n          this.fetchAccountInfo();\n        } else {\n          throw 'Failed Connect Wallet';\n        }\n\n        console.log('res!!', res);\n      });\n      return {\n        result: true,\n        msg: 'Succeed Connect Wallet'\n      };\n    } catch (err) {\n      return {\n        result: false,\n        msg: err\n      };\n    }\n  },\n\n  addAccountListner(fetch) {\n    ethereum.on('accountsChanged', _ref => {\n      let [accounts] = _ref;\n      this.account = accounts;\n      this.stakeIDs = [];\n      this.stakedPools = [];\n      fetch();\n    });\n    ethereum.on('chainChanged', () => {\n      window.location.reload();\n    });\n  },\n\n  fetchAccountInfo() {\n    this.getAllowance();\n    this.getAccountStakingTotal();\n    this.getTotalExpectedReward();\n    this.getAccountTier();\n    this.getSBPBalance();\n    this.getStakeIds();\n    this.getTVL();\n  },\n\n  async getTVL() {\n    try {\n      await Repository.getTVL(this.stakingContract.methods).then(res => {\n        if (res) this.stakingInfo.TVL = res;\n      });\n    } catch (err) {\n      return err;\n    }\n  },\n\n  async ApproveMaxBalance() {\n    try {\n      await Repository.approveMaxBalance({\n        contract: this.SBPContract.methods,\n        stakingAddress: this.stakingContract._address,\n        account: this.account\n      });\n      this.getAllowance();\n      return {\n        result: true,\n        msg: 'Approval Success'\n      };\n    } catch (err) {\n      return {\n        result: false,\n        msg: 'Failed Approval'\n      };\n    }\n  },\n\n  async getAllowance() {\n    try {\n      await Repository.getAllowance({\n        contract: this.SBPContract.methods,\n        stakingAddress: this.stakingContract._address,\n        account: this.account\n      }).then(res => {\n        if (res) this.stakingInfo.allowance = res;\n      });\n    } catch (err) {\n      return err;\n    }\n  },\n\n  async getAccountStakingTotal() {\n    try {\n      await Repository.getAccountStakingTotal({\n        contract: this.stakingContract.methods,\n        account: this.account\n      }).then(res => {\n        if (res) this.stakingInfo.accountStakingTotal = res;\n      });\n    } catch (err) {\n      return err;\n    }\n  },\n\n  async getTotalExpectedReward() {\n    try {\n      await Repository.getTotalExpectedReward({\n        contract: this.stakingContract.methods,\n        account: this.account\n      }).then(res => {\n        if (res) this.stakingInfo.totalExpectedReward = res;\n      });\n    } catch (err) {\n      return err;\n    }\n  },\n\n  async getAccountTier() {\n    try {\n      await Repository.getAccountTier({\n        contract: this.stakingContract.methods,\n        account: this.account\n      }).then(res => {\n        if (res) this.stakingInfo.tier = res;\n      });\n    } catch (err) {\n      return err;\n    }\n  },\n\n  async getSBPBalance() {\n    try {\n      await Repository.getSBPBalance({\n        contract: this.SBPContract.methods,\n        account: this.account\n      }).then(res => {\n        if (res) this.stakingInfo.SBPBalance = res;\n      });\n      return true;\n    } catch (err) {\n      return err;\n    }\n  },\n\n  async getPenaltyFee() {\n    try {\n      await Repository.getPenaltyFee({\n        contract: this.stakingContract.methods\n      }).then(res => {\n        if (res) this.paneltyFee = res;\n      });\n    } catch (err) {\n      return err;\n    }\n  },\n\n  async getStakingPool() {\n    //storageID\n    try {\n      this.stakingPool = [];\n      await Repository.getStorageNumbers({\n        contract: this.stakingContract.methods\n      }).then(async res => {\n        if (res && res > 0) {\n          let poolInfo = [];\n\n          for (let i = 0; i < res; i++) {\n            let pool = await Repository.getPoolInfo({\n              contract: this.stakingContract.methods,\n              storageID: i + 1\n            });\n            poolInfo.push({\n              storageId: i + 1,\n              ...pool\n            });\n          }\n\n          this.stakingPool = poolInfo;\n        } // console.log('stakingPool: ', this.stakingPool);\n\n      });\n    } catch (err) {\n      return err;\n    }\n  },\n\n  async getStakeIds() {\n    // stakedid\n    try {\n      this.stakedPools = [];\n      await Repository.getStakeIds({\n        contract: this.stakingContract.methods,\n        account: this.account\n      }).then(async res => {\n        if (res && res.length > 0) {\n          this.stakeIDs = res;\n\n          for (let i = 0; i < res.length; i++) {\n            await this.getStakedPool(res[i]).then(res => {\n              if (res) this.stakedPools.push(res);\n            });\n          }\n\n          setTimeout(() => {}, 3000);\n        }\n      });\n    } catch (err) {}\n  },\n\n  async getStakedPool(stakeId) {\n    //staking stakeidë¡œ pool \n    try {\n      const res = await Repository.getStakedPool({\n        contract: this.stakingContract.methods,\n        account: this.account,\n        stakeIds: stakeId\n      });\n      return { ...res,\n        stakingId: stakeId\n      };\n    } catch (err) {\n      console.log(err);\n    }\n  },\n\n  async stakeSBP(_ref2) {\n    let {\n      amount,\n      storageId\n    } = _ref2;\n    await Repository.stakeSBP({\n      contract: this.stakingContract.methods,\n      amount: amount,\n      storageId: storageId,\n      account: this.account\n    });\n    return {\n      result: true,\n      msg: 'Succeed Staking SBP'\n    };\n  },\n\n  async unStakeSBP(stakedId) {\n    try {\n      await Repository.unStake({\n        contract: this.stakingContract.methods,\n        stakedId: stakedId,\n        account: this.account\n      });\n      return {\n        result: true,\n        msg: 'Succeed Claim Reward'\n      };\n    } catch (err) {\n      return {\n        result: false,\n        msg: 'Failed Claim Reward'\n      };\n    }\n  },\n\n  async earlyClaimSBP(stakedId) {\n    try {\n      await Repository.earlyClaimSBP({\n        contract: this.stakingContract.methods,\n        stakedId: stakedId,\n        account: this.account\n      });\n      return {\n        result: true,\n        msg: 'Succeed Early Claim Reward'\n      };\n    } catch (err) {\n      return {\n        result: false,\n        msg: 'Failed Claim Early Reward'\n      };\n    }\n  },\n\n  async getStakeStatus(stakedId) {\n    try {\n      return await Repository.getStakeStatus({\n        contract: this.stakingContract.methods,\n        stakedId: stakedId,\n        account: this.account\n      });\n    } catch (err) {//\n    }\n  },\n\n  async getExpectedPoolReward(stakedId) {\n    try {\n      return await Repository.getExpectedPoolReward({\n        contract: this.stakingContract.methods,\n        stakedId: stakedId,\n        account: this.account\n      });\n    } catch (err) {//\n    }\n  }\n\n});\nexport default Store;","map":{"version":3,"sources":["C:/Users/user/Desktop/SBPGIT/DAPP_Staking_SBP/src/store/store.js"],"names":["observable","Repository","ethereum","window","Store","account","stakingContract","SBPContract","web3","stakingInfo","TVL","accountStakingTotal","totalExpectedReward","tier","SBPBalance","allowance","stakingPool","stakeIDs","stakedPools","paneltyFee","liqfee","fetchContract","then","res","smartContract_SBP","smartContract_staking","err","connectWallet","walletConnect","fetchAccountInfo","console","log","result","msg","addAccountListner","fetch","on","accounts","location","reload","getAllowance","getAccountStakingTotal","getTotalExpectedReward","getAccountTier","getSBPBalance","getStakeIds","getTVL","methods","ApproveMaxBalance","approveMaxBalance","contract","stakingAddress","_address","getPenaltyFee","getStakingPool","getStorageNumbers","poolInfo","i","pool","getPoolInfo","storageID","push","storageId","length","getStakedPool","setTimeout","stakeId","stakeIds","stakingId","stakeSBP","amount","unStakeSBP","stakedId","unStake","earlyClaimSBP","getStakeStatus","getExpectedPoolReward"],"mappings":"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","sourcesContent":["import { observable } from 'mobx';\nimport Repository from './repository';\n\nconst { ethereum } = window;\nconst Store = observable({\n  account: null,\n  stakingContract: null, //SHIBA STAKING SMART CONTRACT\n  SBPContract: null, // $SBP SMART CONTRACT\n  web3: null,\n  stakingInfo: {\n    TVL: '', // total value locked\n    accountStakingTotal: 0, // Your SBPS in Staking\n    totalExpectedReward: 0, // Total Expected Reward\n    tier: '', // Account Tier\n    SBPBalance: 0, // Account $SBP Balance\n    allowance: 0,\n  },\n  stakingPool: [], //Staking Pools\n  stakeIDs: [], // StakeIDs of Account\n  stakedPools: [], //Staked Pool of Account\n  paneltyFee: 0, // Panelty Fee\n  liqfee: 0,\n\n  async fetchContract() {\n    try {\n      await Repository.fetchContract().then(res => {\n        if (res) {\n          const { smartContract_SBP, smartContract_staking, web3 } = res;\n          this.stakingContract = smartContract_staking;\n          this.SBPContract = smartContract_SBP;\n          this.web3 = web3;\n        }\n      });\n      return true;\n    } catch (err) {\n      // console.log('err: ', err);\n    }\n  },\n  async connectWallet() {\n    try {\n      await Repository.walletConnect().then(res => {\n        if (res) {\n          this.account = res;\n          this.fetchAccountInfo();\n        } else {\n          throw 'Failed Connect Wallet';\n        }\n        console.log('res!!', res);\n      });\n      return { result: true, msg: 'Succeed Connect Wallet' };\n    } catch (err) {\n      return { result: false, msg: err };\n    }\n  },\n  addAccountListner(fetch) {\n    ethereum.on('accountsChanged', ([accounts]) => {\n      this.account = accounts;\n      this.stakeIDs = [];\n      this.stakedPools = [];\n      fetch();\n    });\n    ethereum.on('chainChanged', () => {\n      window.location.reload();\n    });\n  },\n  fetchAccountInfo() {\n    this.getAllowance();\n    this.getAccountStakingTotal();\n    this.getTotalExpectedReward();\n    this.getAccountTier();\n    this.getSBPBalance();\n    this.getStakeIds();\n    this.getTVL();\n  },\n  async getTVL() {\n    try {\n      await Repository.getTVL(this.stakingContract.methods).then(res => {\n        if (res) this.stakingInfo.TVL = res;\n      });\n    } catch (err) {\n      return err;\n    }\n  },\n  async ApproveMaxBalance() {\n    try {\n      await Repository.approveMaxBalance({\n        contract: this.SBPContract.methods,\n        stakingAddress: this.stakingContract._address,\n        account: this.account,\n      });\n\n      this.getAllowance();\n      return { result: true, msg: 'Approval Success' };\n    } catch (err) {\n      return { result: false, msg: 'Failed Approval' };\n    }\n  },\n\n  async getAllowance() {\n    try {\n      await Repository.getAllowance({\n        contract: this.SBPContract.methods,\n        stakingAddress: this.stakingContract._address,\n        account: this.account,\n      }).then(res => {\n        if (res) this.stakingInfo.allowance = res;\n      });\n    } catch (err) {\n      return err;\n    }\n  },\n  async getAccountStakingTotal() {\n    try {\n      await Repository.getAccountStakingTotal({\n        contract: this.stakingContract.methods,\n        account: this.account,\n      }).then(res => {\n        if (res) this.stakingInfo.accountStakingTotal = res;\n      });\n    } catch (err) {\n      return err;\n    }\n  },\n\n  async getTotalExpectedReward() {\n    try {\n      await Repository.getTotalExpectedReward({\n        contract: this.stakingContract.methods,\n        account: this.account,\n      }).then(res => {\n        if (res) this.stakingInfo.totalExpectedReward = res;\n      });\n    } catch (err) {\n      return err;\n    }\n  },\n  async getAccountTier() {\n    try {\n      await Repository.getAccountTier({\n        contract: this.stakingContract.methods,\n        account: this.account,\n      }).then(res => {\n        if (res) this.stakingInfo.tier = res;\n      });\n    } catch (err) {\n      return err;\n    }\n  },\n  async getSBPBalance() {\n    try {\n      await Repository.getSBPBalance({\n        contract: this.SBPContract.methods,\n        account: this.account,\n      }).then(res => {\n        if (res) this.stakingInfo.SBPBalance = res;\n      });\n      return true;\n    } catch (err) {\n      return err;\n    }\n  },\n  async getPenaltyFee() {\n    try {\n      await Repository.getPenaltyFee({\n        contract: this.stakingContract.methods,\n      }).then(res => {\n        if (res) this.paneltyFee = res;\n      });\n    } catch (err) {\n      return err;\n    }\n  },\n  async getStakingPool() {\n    //storageID\n    try {\n      this.stakingPool = [];\n      await Repository.getStorageNumbers({\n        contract: this.stakingContract.methods,\n      }).then(async res => {\n        if (res && res > 0) {\n          let poolInfo = [];\n          for (let i = 0; i < res; i++) {\n            let pool = await Repository.getPoolInfo({\n              contract: this.stakingContract.methods,\n              storageID: i + 1,\n            });\n            poolInfo.push({ storageId: i + 1, ...pool });\n          }\n          this.stakingPool = poolInfo;\n        }\n        // console.log('stakingPool: ', this.stakingPool);\n      });\n    } catch (err) {\n      return err;\n    }\n  },\n  async getStakeIds() {\n    // stakedid\n    try {\n      this.stakedPools = [];\n      await Repository.getStakeIds({\n        contract: this.stakingContract.methods,\n        account: this.account,\n      }).then(async res => {\n        if (res && res.length > 0) {\n          this.stakeIDs = res;\n          for (let i = 0; i < res.length; i++) {\n            await this.getStakedPool(res[i]).then(res => {\n              if (res) this.stakedPools.push(res);\n            });\n          }\n          setTimeout(() => {}, 3000);\n        }\n      });\n    } catch (err) {}\n  },\n  async getStakedPool(stakeId) {\n    //staking stakeidë¡œ pool \n    try {\n      const res = await Repository.getStakedPool({\n        contract: this.stakingContract.methods,\n        account: this.account,\n        stakeIds: stakeId,\n      });\n      return { ...res, stakingId: stakeId };\n    } catch (err) {\n      console.log(err);\n    }\n  },\n  async stakeSBP({ amount, storageId }) {\n    await Repository.stakeSBP({\n      contract: this.stakingContract.methods,\n      amount: amount,\n      storageId: storageId,\n      account: this.account,\n    });\n    return { result: true, msg: 'Succeed Staking SBP' };\n  },\n  async unStakeSBP(stakedId) {\n    try {\n      await Repository.unStake({\n        contract: this.stakingContract.methods,\n        stakedId: stakedId,\n\n        account: this.account,\n      });\n      return { result: true, msg: 'Succeed Claim Reward' };\n    } catch (err) {\n      return { result: false, msg: 'Failed Claim Reward' };\n    }\n  },\n  async earlyClaimSBP(stakedId) {\n    try {\n      await Repository.earlyClaimSBP({\n        contract: this.stakingContract.methods,\n        stakedId: stakedId,\n        account: this.account,\n      });\n      return { result: true, msg: 'Succeed Early Claim Reward' };\n    } catch (err) {\n      return { result: false, msg: 'Failed Claim Early Reward' };\n    }\n  },\n  async getStakeStatus(stakedId) {\n    try {\n      return await Repository.getStakeStatus({\n        contract: this.stakingContract.methods,\n        stakedId: stakedId,\n        account: this.account,\n      });\n    } catch (err) {\n      //\n    }\n  },\n  async getExpectedPoolReward(stakedId) {\n    try {\n      return await Repository.getExpectedPoolReward({\n        contract: this.stakingContract.methods,\n        stakedId: stakedId,\n        account: this.account,\n      });\n    } catch (err) {\n      //\n    }\n  },\n});\n\nexport default Store;"]},"metadata":{},"sourceType":"module"}