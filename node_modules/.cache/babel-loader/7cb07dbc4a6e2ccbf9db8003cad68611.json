{"ast":null,"code":"import _slicedToArray from\"C:\\\\Users\\\\user\\\\Desktop\\\\SBPGIT\\\\DAPP_Staking_SBP\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";import _regeneratorRuntime from\"C:\\\\Users\\\\user\\\\Desktop\\\\SBPGIT\\\\DAPP_Staking_SBP\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";import _asyncToGenerator from\"C:\\\\Users\\\\user\\\\Desktop\\\\SBPGIT\\\\DAPP_Staking_SBP\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";import Web3 from'web3';import Web3EthContract from'web3-eth-contract';import Web3Modal from'web3modal';import WalletConnectProvider from'@walletconnect/web3-provider';var providerOptions={walletconnect:{package:WalletConnectProvider,options:{infuraId:'8043bb2cf99347b1bfadfb233c5325c0'// rpc: {\n//   56: 'https://bsc-dataseed.binance.org/',\n// },\n}}};var provider;var web3;var abi_SBP;var abi_staking;var CONFIG_SBP;var CONFIG_staking;var Repository={fetchContract:function(){var _fetchContract=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var web3Modal,smartContractObj_SBP,smartContractObj_staking;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return fetch('/config/abi_SBP.json',{headers:{'Content-Type':'application/json',Accept:'application/json'}}).then(function(res){return res.json();});case 2:abi_SBP=_context.sent;_context.next=5;return fetch('/config/abi_staking.json',{headers:{'Content-Type':'application/json',Accept:'application/json'}}).then(function(res){return res.json();});case 5:abi_staking=_context.sent;_context.next=8;return fetch('/config/config_SBP.json',{headers:{'Content-Type':'application/json',Accept:'application/json'}}).then(function(res){return res.json();});case 8:CONFIG_SBP=_context.sent;_context.next=11;return fetch('/config/config_staking.json',{headers:{'Content-Type':'application/json',Accept:'application/json'}}).then(function(res){return res.json();});case 11:CONFIG_staking=_context.sent;web3Modal=new Web3Modal({cacheProvider:false,// optional\nproviderOptions:providerOptions// required\n// disableInjectedProvider: true, // optional. For MetaMask / Brave / Opera.\n});_context.prev=13;_context.next=16;return web3Modal.connect();case 16:provider=_context.sent;_context.next=23;break;case 19:_context.prev=19;_context.t0=_context[\"catch\"](13);console.log('Could not get a wallet connection',_context.t0);return _context.abrupt(\"return\");case 23:web3=new Web3(provider);Web3EthContract.setProvider(provider);smartContractObj_SBP=new Web3EthContract(abi_SBP,CONFIG_SBP.CONTRACT_ADDRESS);smartContractObj_staking=new Web3EthContract(abi_staking,CONFIG_staking.CONTRACT_ADDRESS);return _context.abrupt(\"return\",{smartContract_SBP:smartContractObj_SBP,smartContract_staking:smartContractObj_staking});case 28:case\"end\":return _context.stop();}}},_callee,null,[[13,19]]);}));function fetchContract(){return _fetchContract.apply(this,arguments);}return fetchContract;}(),walletConnect:function(){var _walletConnect=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(){var networkId,_yield$web3$eth$getAc,_yield$web3$eth$getAc2,accounts;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.prev=0;_context2.next=3;return web3.eth.getChainId();case 3:networkId=_context2.sent;_context2.next=6;return web3.eth.getAccounts();case 6:_yield$web3$eth$getAc=_context2.sent;_yield$web3$eth$getAc2=_slicedToArray(_yield$web3$eth$getAc,1);accounts=_yield$web3$eth$getAc2[0];if(!(networkId==CONFIG_staking.NETWORK.ID)){_context2.next=13;break;}return _context2.abrupt(\"return\",accounts);case 13:throw'netErr';case 14:_context2.next=23;break;case 16:_context2.prev=16;_context2.t0=_context2[\"catch\"](0);if(!(_context2.t0==='netErr')){_context2.next=22;break;}throw\"Change network to \".concat(CONFIG_staking.NETWORK.NAME,\".\");case 22:throw new Error('Something went wrong.');case 23:case\"end\":return _context2.stop();}}},_callee2,null,[[0,16]]);}));function walletConnect(){return _walletConnect.apply(this,arguments);}return walletConnect;}(),getTVL:function(){var _getTVL=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(contract){var res;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:_context3.prev=0;_context3.next=3;return contract.StakerTVL().call();case 3:res=_context3.sent;return _context3.abrupt(\"return\",res);case 7:_context3.prev=7;_context3.t0=_context3[\"catch\"](0);throw new Error('Failed Getting Total_Value_Locked !');case 10:case\"end\":return _context3.stop();}}},_callee3,null,[[0,7]]);}));function getTVL(_x){return _getTVL.apply(this,arguments);}return getTVL;}(),approveMaxBalance:function(){var _approveMaxBalance=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(_ref){var contract,stakingAddress,account,res;return _regeneratorRuntime.wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:contract=_ref.contract,stakingAddress=_ref.stakingAddress,account=_ref.account;_context4.prev=1;_context4.next=4;return contract.approveMax(stakingAddress).send({from:account});case 4:res=_context4.sent;return _context4.abrupt(\"return\",res);case 8:_context4.prev=8;_context4.t0=_context4[\"catch\"](1);throw new Error('Failed Getting ApproveMax');case 11:case\"end\":return _context4.stop();}}},_callee4,null,[[1,8]]);}));function approveMaxBalance(_x2){return _approveMaxBalance.apply(this,arguments);}return approveMaxBalance;}(),getAllowance:function(){var _getAllowance=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5(_ref2){var contract,stakingAddress,account,res;return _regeneratorRuntime.wrap(function _callee5$(_context5){while(1){switch(_context5.prev=_context5.next){case 0:contract=_ref2.contract,stakingAddress=_ref2.stakingAddress,account=_ref2.account;_context5.prev=1;_context5.next=4;return contract.allowance(account,stakingAddress).call();case 4:res=_context5.sent;return _context5.abrupt(\"return\",res);case 8:_context5.prev=8;_context5.t0=_context5[\"catch\"](1);throw new Error('Failed Getting Allowance');case 11:case\"end\":return _context5.stop();}}},_callee5,null,[[1,8]]);}));function getAllowance(_x3){return _getAllowance.apply(this,arguments);}return getAllowance;}(),getAccountStakingTotal:function(){var _getAccountStakingTotal=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee6(_ref3){var contract,account,res;return _regeneratorRuntime.wrap(function _callee6$(_context6){while(1){switch(_context6.prev=_context6.next){case 0:contract=_ref3.contract,account=_ref3.account;_context6.prev=1;_context6.next=4;return contract.AccountStakingTotal(account).call();case 4:res=_context6.sent;return _context6.abrupt(\"return\",res);case 8:_context6.prev=8;_context6.t0=_context6[\"catch\"](1);throw new Error('Failed Getting Account Staking Total !');case 11:case\"end\":return _context6.stop();}}},_callee6,null,[[1,8]]);}));function getAccountStakingTotal(_x4){return _getAccountStakingTotal.apply(this,arguments);}return getAccountStakingTotal;}(),getTotalExpectedReward:function(){var _getTotalExpectedReward=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee7(_ref4){var contract,account,res;return _regeneratorRuntime.wrap(function _callee7$(_context7){while(1){switch(_context7.prev=_context7.next){case 0:contract=_ref4.contract,account=_ref4.account;_context7.prev=1;_context7.next=4;return contract.getTotalRewardsExpected(account).call();case 4:res=_context7.sent;return _context7.abrupt(\"return\",res);case 8:_context7.prev=8;_context7.t0=_context7[\"catch\"](1);throw new Error('Failed Getting Account Staking Total !');case 11:case\"end\":return _context7.stop();}}},_callee7,null,[[1,8]]);}));function getTotalExpectedReward(_x5){return _getTotalExpectedReward.apply(this,arguments);}return getTotalExpectedReward;}(),getAccountTier:function(){var _getAccountTier=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee8(_ref5){var contract,account,res;return _regeneratorRuntime.wrap(function _callee8$(_context8){while(1){switch(_context8.prev=_context8.next){case 0:contract=_ref5.contract,account=_ref5.account;_context8.prev=1;_context8.next=4;return contract.AccountTier(account).call();case 4:res=_context8.sent;if(!(res==2)){_context8.next=9;break;}return _context8.abrupt(\"return\",'Silver');case 9:if(!(res==3)){_context8.next=13;break;}return _context8.abrupt(\"return\",'Gold');case 13:if(!(res==4)){_context8.next=17;break;}return _context8.abrupt(\"return\",'Platinum');case 17:if(!(res==5)){_context8.next=21;break;}return _context8.abrupt(\"return\",'Diamond');case 21:return _context8.abrupt(\"return\",'None');case 22:_context8.next=27;break;case 24:_context8.prev=24;_context8.t0=_context8[\"catch\"](1);throw new Error('Failed Getting Accounnt Tier !');case 27:case\"end\":return _context8.stop();}}},_callee8,null,[[1,24]]);}));function getAccountTier(_x6){return _getAccountTier.apply(this,arguments);}return getAccountTier;}(),getSBPBalance:function(){var _getSBPBalance=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee9(_ref6){var contract,account,res;return _regeneratorRuntime.wrap(function _callee9$(_context9){while(1){switch(_context9.prev=_context9.next){case 0:contract=_ref6.contract,account=_ref6.account;_context9.prev=1;_context9.next=4;return contract.balanceOf(account).call();case 4:res=_context9.sent;return _context9.abrupt(\"return\",res);case 8:_context9.prev=8;_context9.t0=_context9[\"catch\"](1);throw new Error('Failed Getting Balance !');case 11:case\"end\":return _context9.stop();}}},_callee9,null,[[1,8]]);}));function getSBPBalance(_x7){return _getSBPBalance.apply(this,arguments);}return getSBPBalance;}(),getPenaltyFee:function(){var _getPenaltyFee=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee10(_ref7){var contract,res;return _regeneratorRuntime.wrap(function _callee10$(_context10){while(1){switch(_context10.prev=_context10.next){case 0:contract=_ref7.contract;_context10.prev=1;_context10.next=4;return contract.getPenaltyFee().call();case 4:res=_context10.sent;return _context10.abrupt(\"return\",res);case 8:_context10.prev=8;_context10.t0=_context10[\"catch\"](1);throw new Error('Failed Getting PenaltyFee');case 11:case\"end\":return _context10.stop();}}},_callee10,null,[[1,8]]);}));function getPenaltyFee(_x8){return _getPenaltyFee.apply(this,arguments);}return getPenaltyFee;}(),getStorageNumbers:function(){var _getStorageNumbers=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee11(_ref8){var contract,res;return _regeneratorRuntime.wrap(function _callee11$(_context11){while(1){switch(_context11.prev=_context11.next){case 0:contract=_ref8.contract;_context11.prev=1;_context11.next=4;return contract.getStorageNumbers().call();case 4:res=_context11.sent;return _context11.abrupt(\"return\",res);case 8:_context11.prev=8;_context11.t0=_context11[\"catch\"](1);throw new Error('Failed Getting Pool Number');case 11:case\"end\":return _context11.stop();}}},_callee11,null,[[1,8]]);}));function getStorageNumbers(_x9){return _getStorageNumbers.apply(this,arguments);}return getStorageNumbers;}(),getPoolInfo:function(){var _getPoolInfo=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee12(_ref9){var contract,storageID,res;return _regeneratorRuntime.wrap(function _callee12$(_context12){while(1){switch(_context12.prev=_context12.next){case 0:contract=_ref9.contract,storageID=_ref9.storageID;_context12.prev=1;_context12.next=4;return contract.storages(storageID).call();case 4:res=_context12.sent;return _context12.abrupt(\"return\",res);case 8:_context12.prev=8;_context12.t0=_context12[\"catch\"](1);throw new Error('Failed Getting Pool Number');case 11:case\"end\":return _context12.stop();}}},_callee12,null,[[1,8]]);}));function getPoolInfo(_x10){return _getPoolInfo.apply(this,arguments);}return getPoolInfo;}(),getStakeIds:function(){var _getStakeIds=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee13(_ref10){var contract,account,res;return _regeneratorRuntime.wrap(function _callee13$(_context13){while(1){switch(_context13.prev=_context13.next){case 0:contract=_ref10.contract,account=_ref10.account;_context13.prev=1;_context13.next=4;return contract.StakeIDs(account).call();case 4:res=_context13.sent;return _context13.abrupt(\"return\",res);case 8:_context13.prev=8;_context13.t0=_context13[\"catch\"](1);throw new Error('Failed Getting StakeIDs');case 11:case\"end\":return _context13.stop();}}},_callee13,null,[[1,8]]);}));function getStakeIds(_x11){return _getStakeIds.apply(this,arguments);}return getStakeIds;}(),getStakedPool:function(){var _getStakedPool=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee14(_ref11){var contract,account,stakeIds,res;return _regeneratorRuntime.wrap(function _callee14$(_context14){while(1){switch(_context14.prev=_context14.next){case 0:contract=_ref11.contract,account=_ref11.account,stakeIds=_ref11.stakeIds;_context14.prev=1;_context14.next=4;return contract.pools(account,stakeIds).call();case 4:res=_context14.sent;return _context14.abrupt(\"return\",res);case 8:_context14.prev=8;_context14.t0=_context14[\"catch\"](1);throw new Error('Faild Getting Pool Info');case 11:case\"end\":return _context14.stop();}}},_callee14,null,[[1,8]]);}));function getStakedPool(_x12){return _getStakedPool.apply(this,arguments);}return getStakedPool;}(),stakeSBP:function(){var _stakeSBP=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee15(_ref12){var contract,amount,storageId,account,amounts,res;return _regeneratorRuntime.wrap(function _callee15$(_context15){while(1){switch(_context15.prev=_context15.next){case 0:contract=_ref12.contract,amount=_ref12.amount,storageId=_ref12.storageId,account=_ref12.account;amounts=web3.utils.toWei(''+amount,'ether');_context15.next=4;return contract.StakeSBP(amounts,storageId).send({from:account});case 4:res=_context15.sent;return _context15.abrupt(\"return\",res);case 6:case\"end\":return _context15.stop();}}},_callee15);}));function stakeSBP(_x13){return _stakeSBP.apply(this,arguments);}return stakeSBP;}(),unStake:function(){var _unStake=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee16(_ref13){var contract,stakedId,account,res;return _regeneratorRuntime.wrap(function _callee16$(_context16){while(1){switch(_context16.prev=_context16.next){case 0:contract=_ref13.contract,stakedId=_ref13.stakedId,account=_ref13.account;_context16.prev=1;_context16.next=4;return contract.unstakeSBP(stakedId).send({from:account});case 4:res=_context16.sent;return _context16.abrupt(\"return\",res);case 8:_context16.prev=8;_context16.t0=_context16[\"catch\"](1);throw new Error('Failed Claim Reward');case 11:case\"end\":return _context16.stop();}}},_callee16,null,[[1,8]]);}));function unStake(_x14){return _unStake.apply(this,arguments);}return unStake;}(),earlyClaimSBP:function(){var _earlyClaimSBP=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee17(_ref14){var contract,stakedId,account,res;return _regeneratorRuntime.wrap(function _callee17$(_context17){while(1){switch(_context17.prev=_context17.next){case 0:contract=_ref14.contract,stakedId=_ref14.stakedId,account=_ref14.account;_context17.prev=1;_context17.next=4;return contract.earlyClaimSBP(stakedId).send({from:account});case 4:res=_context17.sent;return _context17.abrupt(\"return\",res);case 8:_context17.prev=8;_context17.t0=_context17[\"catch\"](1);throw new Error('Failed Claim Early Reward');case 11:case\"end\":return _context17.stop();}}},_callee17,null,[[1,8]]);}));function earlyClaimSBP(_x15){return _earlyClaimSBP.apply(this,arguments);}return earlyClaimSBP;}(),getStakeStatus:function(){var _getStakeStatus=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee18(_ref15){var contract,stakedId,account;return _regeneratorRuntime.wrap(function _callee18$(_context18){while(1){switch(_context18.prev=_context18.next){case 0:contract=_ref15.contract,stakedId=_ref15.stakedId,account=_ref15.account;_context18.prev=1;_context18.next=4;return contract.StakeStatus(account,stakedId).call();case 4:return _context18.abrupt(\"return\",_context18.sent);case 7:_context18.prev=7;_context18.t0=_context18[\"catch\"](1);throw new Error('Failed get Staking Status');case 10:case\"end\":return _context18.stop();}}},_callee18,null,[[1,7]]);}));function getStakeStatus(_x16){return _getStakeStatus.apply(this,arguments);}return getStakeStatus;}(),getExpectedPoolReward:function(){var _getExpectedPoolReward=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee19(_ref16){var contract,stakedId,account;return _regeneratorRuntime.wrap(function _callee19$(_context19){while(1){switch(_context19.prev=_context19.next){case 0:contract=_ref16.contract,stakedId=_ref16.stakedId,account=_ref16.account;_context19.prev=1;_context19.next=4;return contract.expectedPoolReward(account,stakedId).call();case 4:return _context19.abrupt(\"return\",_context19.sent);case 7:_context19.prev=7;_context19.t0=_context19[\"catch\"](1);throw new Error('Failed get ExpectedPoolReward');case 10:case\"end\":return _context19.stop();}}},_callee19,null,[[1,7]]);}));function getExpectedPoolReward(_x17){return _getExpectedPoolReward.apply(this,arguments);}return getExpectedPoolReward;}()};export default Repository;","map":{"version":3,"sources":["C:/Users/user/Desktop/SBPGIT/DAPP_Staking_SBP/src/store/repository.js"],"names":["Web3","Web3EthContract","Web3Modal","WalletConnectProvider","providerOptions","walletconnect","package","options","infuraId","provider","web3","abi_SBP","abi_staking","CONFIG_SBP","CONFIG_staking","Repository","fetchContract","fetch","headers","Accept","then","res","json","web3Modal","cacheProvider","connect","console","log","setProvider","smartContractObj_SBP","CONTRACT_ADDRESS","smartContractObj_staking","smartContract_SBP","smartContract_staking","walletConnect","eth","getChainId","networkId","getAccounts","accounts","NETWORK","ID","NAME","Error","getTVL","contract","StakerTVL","call","approveMaxBalance","stakingAddress","account","approveMax","send","from","getAllowance","allowance","getAccountStakingTotal","AccountStakingTotal","getTotalExpectedReward","getTotalRewardsExpected","getAccountTier","AccountTier","getSBPBalance","balanceOf","getPenaltyFee","getStorageNumbers","getPoolInfo","storageID","storages","getStakeIds","StakeIDs","getStakedPool","stakeIds","pools","stakeSBP","amount","storageId","amounts","utils","toWei","StakeSBP","unStake","stakedId","unstakeSBP","earlyClaimSBP","getStakeStatus","StakeStatus","getExpectedPoolReward","expectedPoolReward"],"mappings":"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","sourcesContent":["import Web3 from 'web3';\nimport Web3EthContract from 'web3-eth-contract';\nimport Web3Modal from 'web3modal';\nimport WalletConnectProvider from '@walletconnect/web3-provider';\nconst providerOptions = {\n  walletconnect: {\n    package: WalletConnectProvider,\n\n    options: {\n       infuraId: '8043bb2cf99347b1bfadfb233c5325c0',\n      // rpc: {\n      //   56: 'https://bsc-dataseed.binance.org/',\n      // },\n    },\n  },\n};\nlet provider;\nlet web3;\nlet abi_SBP;\nlet abi_staking;\nlet CONFIG_SBP;\nlet CONFIG_staking;\n\nconst Repository = {\n  fetchContract: async () => {\n    abi_SBP = await fetch('/config/abi_SBP.json', {\n      headers: {\n        'Content-Type': 'application/json',\n        Accept: 'application/json',\n      },\n    }).then(res => {\n      return res.json();\n    });\n    abi_staking = await fetch('/config/abi_staking.json', {\n      headers: {\n        'Content-Type': 'application/json',\n        Accept: 'application/json',\n      },\n    }).then(res => {\n      return res.json();\n    });\n    CONFIG_SBP = await fetch('/config/config_SBP.json', {\n      headers: {\n        'Content-Type': 'application/json',\n        Accept: 'application/json',\n      },\n    }).then(res => {\n      return res.json();\n    });\n    CONFIG_staking = await fetch('/config/config_staking.json', {\n      headers: {\n        'Content-Type': 'application/json',\n        Accept: 'application/json',\n      },\n    }).then(res => {\n      return res.json();\n    });\n    let web3Modal = new Web3Modal({\n      cacheProvider: false, // optional\n      providerOptions, // required\n      // disableInjectedProvider: true, // optional. For MetaMask / Brave / Opera.\n    });\n    try {\n      provider = await web3Modal.connect();\n    } catch (e) {\n      console.log('Could not get a wallet connection', e);\n      return;\n    }\n    web3 = new Web3(provider);\n\n    Web3EthContract.setProvider(provider);\n    const smartContractObj_SBP = new Web3EthContract(\n      abi_SBP,\n      CONFIG_SBP.CONTRACT_ADDRESS,\n    );\n    const smartContractObj_staking = new Web3EthContract(\n      abi_staking,\n      CONFIG_staking.CONTRACT_ADDRESS,\n    );\n    return {\n      smartContract_SBP: smartContractObj_SBP,\n      smartContract_staking: smartContractObj_staking,\n    };\n  },\n\n  walletConnect: async () => {\n    try {\n      const networkId = await web3.eth.getChainId();\n      const [accounts] = await web3.eth.getAccounts();\n      if (networkId == CONFIG_staking.NETWORK.ID) {\n        return accounts;\n\n        // Add listeners end\n      } else {\n        throw 'netErr';\n      }\n    } catch (err) {\n      if (err === 'netErr')\n        throw `Change network to ${CONFIG_staking.NETWORK.NAME}.`;\n      else throw new Error('Something went wrong.');\n      // dispatch(connectFailed('Something went wrong.'));\n    }\n  },\n  getTVL: async contract => {\n    try {\n      const res = await contract.StakerTVL().call();\n      return res;\n    } catch (err) {\n      throw new Error('Failed Getting Total_Value_Locked !');\n    }\n  },\n  approveMaxBalance: async ({ contract, stakingAddress, account }) => {\n    try {\n      const res = await contract.approveMax(stakingAddress).send({\n        from: account,\n      });\n      return res;\n    } catch (err) {\n      throw new Error('Failed Getting ApproveMax');\n    }\n  },\n  getAllowance: async ({ contract, stakingAddress, account }) => {\n    try {\n      const res = await contract.allowance(account, stakingAddress).call();\n      return res;\n    } catch (err) {\n      throw new Error('Failed Getting Allowance');\n    }\n  },\n  getAccountStakingTotal: async ({ contract, account }) => {\n    try {\n      const res = await contract.AccountStakingTotal(account).call();\n      return res;\n    } catch (err) {\n      throw new Error('Failed Getting Account Staking Total !');\n    }\n  },\n  getTotalExpectedReward: async ({ contract, account }) => {\n    try {\n      const res = await contract.getTotalRewardsExpected(account).call();\n      return res;\n    } catch (err) {\n      throw new Error('Failed Getting Account Staking Total !');\n    }\n  },\n  getAccountTier: async ({ contract, account }) => {\n    try {\n      const res = await contract.AccountTier(account).call();\n      if (res == 2) {\n        return 'Silver';\n      } else if (res == 3) {\n        return 'Gold';\n      } else if (res == 4) {\n        return 'Platinum';\n      } else if (res == 5) {\n        return 'Diamond';\n      } else {\n        return 'None';\n      }\n    } catch (err) {\n      throw new Error('Failed Getting Accounnt Tier !');\n    }\n  },\n  getSBPBalance: async ({ contract, account }) => {\n    try {\n      const res = await contract.balanceOf(account).call();\n      return res;\n    } catch (err) {\n      throw new Error('Failed Getting Balance !');\n    }\n  },\n  getPenaltyFee: async ({ contract }) => {\n    try {\n      const res = await contract.getPenaltyFee().call();\n      // console.log(res);\n      return res;\n    } catch (err) {\n      throw new Error('Failed Getting PenaltyFee');\n    }\n  },\n  getStorageNumbers: async ({ contract }) => {\n    try {\n      const res = await contract.getStorageNumbers().call();\n      // console.log('storageNum: ', res);\n      return res;\n    } catch (err) {\n      throw new Error('Failed Getting Pool Number');\n    }\n  },\n  getPoolInfo: async ({ contract, storageID }) => {\n    try {\n      const res = await contract.storages(storageID).call();\n      return res;\n    } catch (err) {\n      throw new Error('Failed Getting Pool Number');\n    }\n  },\n  getStakeIds: async ({ contract, account }) => {\n    try {\n      const res = await contract.StakeIDs(account).call();\n      return res;\n    } catch (err) {\n      throw new Error('Failed Getting StakeIDs');\n    }\n  },\n  getStakedPool: async ({ contract, account, stakeIds }) => {\n    try {\n      const res = await contract.pools(account, stakeIds).call();\n      return res;\n    } catch (err) {\n      throw new Error('Faild Getting Pool Info');\n    }\n  },\n  stakeSBP: async ({ contract, amount, storageId, account }) => {\n    var amounts = web3.utils.toWei(''+amount, 'ether');\n    const res = await contract.StakeSBP(amounts, storageId).send({\n      from: account,\n    });\n    // console.log('res', res);\n    return res;\n  },\n  unStake: async ({ contract, stakedId, account }) => {\n    try {\n      const res = await contract.unstakeSBP(stakedId).send({\n        from: account,\n      });\n      // console.log('unstakeSBP', res);\n      return res;\n    } catch (err) {\n      throw new Error('Failed Claim Reward');\n    }\n  },\n  earlyClaimSBP: async ({ contract, stakedId, account }) => {\n    try {\n      const res = await contract.earlyClaimSBP(stakedId).send({\n        from: account,\n      });\n      // console.log('earlyClaimSBP', res);\n      return res;\n    } catch (err) {\n      throw new Error('Failed Claim Early Reward');\n    }\n  },\n  getStakeStatus: async ({ contract, stakedId, account }) => {\n    try {\n      return await contract.StakeStatus(account, stakedId).call();\n    } catch (err) {\n      throw new Error('Failed get Staking Status');\n    }\n  },\n  getExpectedPoolReward: async ({ contract, stakedId, account }) => {\n    try {\n      return await contract.expectedPoolReward(account, stakedId).call();\n    } catch (err) {\n      throw new Error('Failed get ExpectedPoolReward');\n    }\n  },\n};\n\nexport default Repository;"]},"metadata":{},"sourceType":"module"}