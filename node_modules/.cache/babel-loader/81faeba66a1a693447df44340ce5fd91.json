{"ast":null,"code":"/**\n * @fileoverview Runs `prettier` as an ESLint rule.\n * @author Andres Suarez\n */\n'use strict'; // ------------------------------------------------------------------------------\n//  Requirements\n// ------------------------------------------------------------------------------\n\nconst {\n  showInvisibles,\n  generateDifferences\n} = require('prettier-linter-helpers'); // ------------------------------------------------------------------------------\n//  Constants\n// ------------------------------------------------------------------------------\n\n\nconst {\n  INSERT,\n  DELETE,\n  REPLACE\n} = generateDifferences; // ------------------------------------------------------------------------------\n//  Privates\n// ------------------------------------------------------------------------------\n// Lazily-loaded Prettier.\n\n/**\n * @type {import('prettier')}\n */\n\nlet prettier; // ------------------------------------------------------------------------------\n//  Rule Definition\n// ------------------------------------------------------------------------------\n\n/**\n * Reports a difference.\n * @param {import('eslint').Rule.RuleContext} context - The ESLint rule context.\n * @param {import('prettier-linter-helpers').Difference} difference - The difference object.\n * @returns {void}\n */\n\nfunction reportDifference(context, difference) {\n  const {\n    operation,\n    offset,\n    deleteText = '',\n    insertText = ''\n  } = difference;\n  const range = [offset, offset + deleteText.length];\n  const [start, end] = range.map(index => context.getSourceCode().getLocFromIndex(index));\n  context.report({\n    messageId: operation,\n    data: {\n      deleteText: showInvisibles(deleteText),\n      insertText: showInvisibles(insertText)\n    },\n    loc: {\n      start,\n      end\n    },\n    fix: fixer => fixer.replaceTextRange(range, insertText)\n  });\n} // ------------------------------------------------------------------------------\n//  Module Definition\n// ------------------------------------------------------------------------------\n\n\nmodule.exports = {\n  configs: {\n    recommended: {\n      extends: ['prettier'],\n      plugins: ['prettier'],\n      rules: {\n        'prettier/prettier': 'error',\n        'arrow-body-style': 'off',\n        'prefer-arrow-callback': 'off'\n      }\n    }\n  },\n  rules: {\n    prettier: {\n      meta: {\n        docs: {\n          url: 'https://github.com/prettier/eslint-plugin-prettier#options'\n        },\n        type: 'layout',\n        fixable: 'code',\n        schema: [// Prettier options:\n        {\n          type: 'object',\n          properties: {},\n          additionalProperties: true\n        }, {\n          type: 'object',\n          properties: {\n            usePrettierrc: {\n              type: 'boolean'\n            },\n            fileInfoOptions: {\n              type: 'object',\n              properties: {},\n              additionalProperties: true\n            }\n          },\n          additionalProperties: true\n        }],\n        messages: {\n          [INSERT]: 'Insert `{{ insertText }}`',\n          [DELETE]: 'Delete `{{ deleteText }}`',\n          [REPLACE]: 'Replace `{{ deleteText }}` with `{{ insertText }}`'\n        }\n      },\n\n      create(context) {\n        const usePrettierrc = !context.options[1] || context.options[1].usePrettierrc !== false;\n        const eslintFileInfoOptions = context.options[1] && context.options[1].fileInfoOptions || {};\n        const sourceCode = context.getSourceCode();\n        const filepath = context.getFilename(); // Processors that extract content from a file, such as the markdown\n        // plugin extracting fenced code blocks may choose to specify virtual\n        // file paths. If this is the case then we need to resolve prettier\n        // config and file info using the on-disk path instead of the virtual\n        // path.\n\n        const onDiskFilepath = context.getPhysicalFilename();\n        const source = sourceCode.text;\n        return {\n          Program() {\n            if (!prettier) {\n              // Prettier is expensive to load, so only load it if needed.\n              prettier = require('prettier');\n            }\n\n            const eslintPrettierOptions = context.options[0] || {};\n            const prettierRcOptions = usePrettierrc ? prettier.resolveConfig.sync(onDiskFilepath, {\n              editorconfig: true\n            }) : null;\n            const {\n              ignored,\n              inferredParser\n            } = prettier.getFileInfo.sync(onDiskFilepath, Object.assign({}, {\n              resolveConfig: true,\n              ignorePath: '.prettierignore'\n            }, eslintFileInfoOptions)); // Skip if file is ignored using a .prettierignore file\n\n            if (ignored) {\n              return;\n            }\n\n            const initialOptions = {}; // ESLint supports processors that let you extract and lint JS\n            // fragments within a non-JS language. In the cases where prettier\n            // supports the same language as a processor, we want to process\n            // the provided source code as javascript (as ESLint provides the\n            // rules with fragments of JS) instead of guessing the parser\n            // based off the filename. Otherwise, for instance, on a .md file we\n            // end up trying to run prettier over a fragment of JS using the\n            // markdown parser, which throws an error.\n            // Processors may set virtual filenames for these extracted blocks.\n            // If they do so then we want to trust the file extension they\n            // provide, and no override is needed.\n            // If the processor does not set any virtual filename (signified by\n            // `filepath` and `onDiskFilepath` being equal) AND we can't\n            // infer the parser from the filename, either because no filename\n            // was provided or because there is no parser found for the\n            // filename, use javascript.\n            // This is added to the options first, so that\n            // prettierRcOptions and eslintPrettierOptions can still override\n            // the parser.\n            //\n            // `parserBlocklist` should contain the list of prettier parser\n            // names for file types where:\n            // * Prettier supports parsing the file type\n            // * There is an ESLint processor that extracts JavaScript snippets\n            //   from the file type.\n\n            const parserBlocklist = [null, 'markdown', 'html'];\n            let inferParserToBabel = parserBlocklist.indexOf(inferredParser) !== -1;\n\n            if ( // it could be processed by `@graphql-eslint/eslint-plugin` or `eslint-plugin-graphql`\n            inferredParser === 'graphql' && // for `eslint-plugin-graphql`, see https://github.com/apollographql/eslint-plugin-graphql/blob/master/src/index.js#L416\n            source.startsWith('ESLintPluginGraphQLFile`')) {\n              inferParserToBabel = true;\n            }\n\n            if (filepath === onDiskFilepath && inferParserToBabel) {\n              initialOptions.parser = 'babel';\n            }\n\n            const prettierOptions = Object.assign({}, initialOptions, prettierRcOptions, eslintPrettierOptions, {\n              filepath\n            }); // prettier.format() may throw a SyntaxError if it cannot parse the\n            // source code it is given. Usually for JS files this isn't a\n            // problem as ESLint will report invalid syntax before trying to\n            // pass it to the prettier plugin. However this might be a problem\n            // for non-JS languages that are handled by a plugin. Notably Vue\n            // files throw an error if they contain unclosed elements, such as\n            // `<template><div></template>. In this case report an error at the\n            // point at which parsing failed.\n\n            let prettierSource;\n\n            try {\n              prettierSource = prettier.format(source, prettierOptions);\n            } catch (err) {\n              if (!(err instanceof SyntaxError)) {\n                throw err;\n              }\n\n              let message = 'Parsing error: ' + err.message; // Prettier's message contains a codeframe style preview of the\n              // invalid code and the line/column at which the error occurred.\n              // ESLint shows those pieces of information elsewhere already so\n              // remove them from the message\n\n              if (err.codeFrame) {\n                message = message.replace(`\\n${err.codeFrame}`, '');\n              }\n\n              if (err.loc) {\n                message = message.replace(/ \\(\\d+:\\d+\\)$/, '');\n              }\n\n              context.report({\n                message,\n                loc: err.loc\n              });\n              return;\n            }\n\n            if (source !== prettierSource) {\n              const differences = generateDifferences(source, prettierSource);\n\n              for (const difference of differences) {\n                reportDifference(context, difference);\n              }\n            }\n          }\n\n        };\n      }\n\n    }\n  }\n};","map":{"version":3,"sources":["C:/Users/user/Desktop/shibapad_staking-main (2)/shibapad_staking-main/node_modules/eslint-plugin-prettier/eslint-plugin-prettier.js"],"names":["showInvisibles","generateDifferences","require","INSERT","DELETE","REPLACE","prettier","reportDifference","context","difference","operation","offset","deleteText","insertText","range","length","start","end","map","index","getSourceCode","getLocFromIndex","report","messageId","data","loc","fix","fixer","replaceTextRange","module","exports","configs","recommended","extends","plugins","rules","meta","docs","url","type","fixable","schema","properties","additionalProperties","usePrettierrc","fileInfoOptions","messages","create","options","eslintFileInfoOptions","sourceCode","filepath","getFilename","onDiskFilepath","getPhysicalFilename","source","text","Program","eslintPrettierOptions","prettierRcOptions","resolveConfig","sync","editorconfig","ignored","inferredParser","getFileInfo","Object","assign","ignorePath","initialOptions","parserBlocklist","inferParserToBabel","indexOf","startsWith","parser","prettierOptions","prettierSource","format","err","SyntaxError","message","codeFrame","replace","differences"],"mappings":"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","sourcesContent":["/**\n * @fileoverview Runs `prettier` as an ESLint rule.\n * @author Andres Suarez\n */\n\n'use strict';\n\n// ------------------------------------------------------------------------------\n//  Requirements\n// ------------------------------------------------------------------------------\n\nconst {\n  showInvisibles,\n  generateDifferences,\n} = require('prettier-linter-helpers');\n\n// ------------------------------------------------------------------------------\n//  Constants\n// ------------------------------------------------------------------------------\n\nconst { INSERT, DELETE, REPLACE } = generateDifferences;\n\n// ------------------------------------------------------------------------------\n//  Privates\n// ------------------------------------------------------------------------------\n\n// Lazily-loaded Prettier.\n/**\n * @type {import('prettier')}\n */\nlet prettier;\n\n// ------------------------------------------------------------------------------\n//  Rule Definition\n// ------------------------------------------------------------------------------\n\n/**\n * Reports a difference.\n * @param {import('eslint').Rule.RuleContext} context - The ESLint rule context.\n * @param {import('prettier-linter-helpers').Difference} difference - The difference object.\n * @returns {void}\n */\nfunction reportDifference(context, difference) {\n  const { operation, offset, deleteText = '', insertText = '' } = difference;\n  const range = [offset, offset + deleteText.length];\n  const [start, end] = range.map((index) =>\n    context.getSourceCode().getLocFromIndex(index)\n  );\n\n  context.report({\n    messageId: operation,\n    data: {\n      deleteText: showInvisibles(deleteText),\n      insertText: showInvisibles(insertText),\n    },\n    loc: { start, end },\n    fix: (fixer) => fixer.replaceTextRange(range, insertText),\n  });\n}\n\n// ------------------------------------------------------------------------------\n//  Module Definition\n// ------------------------------------------------------------------------------\n\nmodule.exports = {\n  configs: {\n    recommended: {\n      extends: ['prettier'],\n      plugins: ['prettier'],\n      rules: {\n        'prettier/prettier': 'error',\n        'arrow-body-style': 'off',\n        'prefer-arrow-callback': 'off',\n      },\n    },\n  },\n  rules: {\n    prettier: {\n      meta: {\n        docs: {\n          url: 'https://github.com/prettier/eslint-plugin-prettier#options',\n        },\n        type: 'layout',\n        fixable: 'code',\n        schema: [\n          // Prettier options:\n          {\n            type: 'object',\n            properties: {},\n            additionalProperties: true,\n          },\n          {\n            type: 'object',\n            properties: {\n              usePrettierrc: { type: 'boolean' },\n              fileInfoOptions: {\n                type: 'object',\n                properties: {},\n                additionalProperties: true,\n              },\n            },\n            additionalProperties: true,\n          },\n        ],\n        messages: {\n          [INSERT]: 'Insert `{{ insertText }}`',\n          [DELETE]: 'Delete `{{ deleteText }}`',\n          [REPLACE]: 'Replace `{{ deleteText }}` with `{{ insertText }}`',\n        },\n      },\n      create(context) {\n        const usePrettierrc =\n          !context.options[1] || context.options[1].usePrettierrc !== false;\n        const eslintFileInfoOptions =\n          (context.options[1] && context.options[1].fileInfoOptions) || {};\n        const sourceCode = context.getSourceCode();\n        const filepath = context.getFilename();\n        // Processors that extract content from a file, such as the markdown\n        // plugin extracting fenced code blocks may choose to specify virtual\n        // file paths. If this is the case then we need to resolve prettier\n        // config and file info using the on-disk path instead of the virtual\n        // path.\n        const onDiskFilepath = context.getPhysicalFilename();\n        const source = sourceCode.text;\n\n        return {\n          Program() {\n            if (!prettier) {\n              // Prettier is expensive to load, so only load it if needed.\n              prettier = require('prettier');\n            }\n\n            const eslintPrettierOptions = context.options[0] || {};\n\n            const prettierRcOptions = usePrettierrc\n              ? prettier.resolveConfig.sync(onDiskFilepath, {\n                  editorconfig: true,\n                })\n              : null;\n\n            const { ignored, inferredParser } = prettier.getFileInfo.sync(\n              onDiskFilepath,\n              Object.assign(\n                {},\n                { resolveConfig: true, ignorePath: '.prettierignore' },\n                eslintFileInfoOptions\n              )\n            );\n\n            // Skip if file is ignored using a .prettierignore file\n            if (ignored) {\n              return;\n            }\n\n            const initialOptions = {};\n\n            // ESLint supports processors that let you extract and lint JS\n            // fragments within a non-JS language. In the cases where prettier\n            // supports the same language as a processor, we want to process\n            // the provided source code as javascript (as ESLint provides the\n            // rules with fragments of JS) instead of guessing the parser\n            // based off the filename. Otherwise, for instance, on a .md file we\n            // end up trying to run prettier over a fragment of JS using the\n            // markdown parser, which throws an error.\n            // Processors may set virtual filenames for these extracted blocks.\n            // If they do so then we want to trust the file extension they\n            // provide, and no override is needed.\n            // If the processor does not set any virtual filename (signified by\n            // `filepath` and `onDiskFilepath` being equal) AND we can't\n            // infer the parser from the filename, either because no filename\n            // was provided or because there is no parser found for the\n            // filename, use javascript.\n            // This is added to the options first, so that\n            // prettierRcOptions and eslintPrettierOptions can still override\n            // the parser.\n            //\n            // `parserBlocklist` should contain the list of prettier parser\n            // names for file types where:\n            // * Prettier supports parsing the file type\n            // * There is an ESLint processor that extracts JavaScript snippets\n            //   from the file type.\n            const parserBlocklist = [null, 'markdown', 'html'];\n\n            let inferParserToBabel =\n              parserBlocklist.indexOf(inferredParser) !== -1;\n\n            if (\n              // it could be processed by `@graphql-eslint/eslint-plugin` or `eslint-plugin-graphql`\n              inferredParser === 'graphql' &&\n              // for `eslint-plugin-graphql`, see https://github.com/apollographql/eslint-plugin-graphql/blob/master/src/index.js#L416\n              source.startsWith('ESLintPluginGraphQLFile`')\n            ) {\n              inferParserToBabel = true;\n            }\n\n            if (filepath === onDiskFilepath && inferParserToBabel) {\n              initialOptions.parser = 'babel';\n            }\n\n            const prettierOptions = Object.assign(\n              {},\n              initialOptions,\n              prettierRcOptions,\n              eslintPrettierOptions,\n              { filepath }\n            );\n\n            // prettier.format() may throw a SyntaxError if it cannot parse the\n            // source code it is given. Usually for JS files this isn't a\n            // problem as ESLint will report invalid syntax before trying to\n            // pass it to the prettier plugin. However this might be a problem\n            // for non-JS languages that are handled by a plugin. Notably Vue\n            // files throw an error if they contain unclosed elements, such as\n            // `<template><div></template>. In this case report an error at the\n            // point at which parsing failed.\n            let prettierSource;\n            try {\n              prettierSource = prettier.format(source, prettierOptions);\n            } catch (err) {\n              if (!(err instanceof SyntaxError)) {\n                throw err;\n              }\n\n              let message = 'Parsing error: ' + err.message;\n\n              // Prettier's message contains a codeframe style preview of the\n              // invalid code and the line/column at which the error occurred.\n              // ESLint shows those pieces of information elsewhere already so\n              // remove them from the message\n              if (err.codeFrame) {\n                message = message.replace(`\\n${err.codeFrame}`, '');\n              }\n              if (err.loc) {\n                message = message.replace(/ \\(\\d+:\\d+\\)$/, '');\n              }\n\n              context.report({ message, loc: err.loc });\n\n              return;\n            }\n\n            if (source !== prettierSource) {\n              const differences = generateDifferences(source, prettierSource);\n\n              for (const difference of differences) {\n                reportDifference(context, difference);\n              }\n            }\n          },\n        };\n      },\n    },\n  },\n};\n"]},"metadata":{},"sourceType":"script"}