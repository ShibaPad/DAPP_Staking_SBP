{"ast":null,"code":"import _objectSpread from\"C:\\\\Users\\\\user\\\\Desktop\\\\SBPGIT\\\\DAPP_Staking_SBP\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"C:\\\\Users\\\\user\\\\Desktop\\\\SBPGIT\\\\DAPP_Staking_SBP\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";import _regeneratorRuntime from\"C:\\\\Users\\\\user\\\\Desktop\\\\SBPGIT\\\\DAPP_Staking_SBP\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";import _asyncToGenerator from\"C:\\\\Users\\\\user\\\\Desktop\\\\SBPGIT\\\\DAPP_Staking_SBP\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";import{observable}from'mobx';import Repository from'./repository';var _window=window,ethereum=_window.ethereum;var Store=observable({account:null,stakingContract:null,//SHIBA STAKING SMART CONTRACT\nSBPContract:null,// $SBP SMART CONTRACT\nweb3:null,stakingInfo:{TVL:'',// total value locked\naccountStakingTotal:0,// Your SBPS in Staking\ntotalExpectedReward:0,// Total Expected Reward\ntier:'',// Account Tier\nSBPBalance:0,// Account $SBP Balance\nallowance:0},stakingPool:[],//Staking Pools\nstakeIDs:[],// StakeIDs of Account\nstakedPools:[],//Staked Pool of Account\npaneltyFee:0,// Panelty Fee\nliqfee:0,fetchContract:function fetchContract(){var _this=this;return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;_context.next=3;return Repository.fetchContract().then(function(res){if(res){var smartContract_SBP=res.smartContract_SBP,smartContract_staking=res.smartContract_staking,web3=res.web3;_this.stakingContract=smartContract_staking;_this.SBPContract=smartContract_SBP;_this.web3=web3;}});case 3:return _context.abrupt(\"return\",true);case 6:_context.prev=6;_context.t0=_context[\"catch\"](0);case 8:case\"end\":return _context.stop();}}},_callee,null,[[0,6]]);}))();},connectWallet:function connectWallet(){var _this2=this;return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(){return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.prev=0;_context2.next=3;return Repository.walletConnect().then(function(res){if(res){_this2.account=res;_this2.fetchAccountInfo();}});case 3:return _context2.abrupt(\"return\",{result:true,msg:'Succeed Connect Wallet'});case 6:_context2.prev=6;_context2.t0=_context2[\"catch\"](0);return _context2.abrupt(\"return\",{result:false,msg:_context2.t0});case 9:case\"end\":return _context2.stop();}}},_callee2,null,[[0,6]]);}))();},addAccountListner:function addAccountListner(fetch){var _this3=this;ethereum.on('accountsChanged',function(_ref){var _ref2=_slicedToArray(_ref,1),accounts=_ref2[0];_this3.account=accounts;_this3.stakeIDs=[];_this3.stakedPools=[];fetch();});ethereum.on('chainChanged',function(){window.location.reload();});},fetchAccountInfo:function fetchAccountInfo(){this.getAllowance();this.getAccountStakingTotal();this.getTotalExpectedReward();this.getAccountTier();this.getSBPBalance();this.getStakeIds();this.getTVL();},getTVL:function getTVL(){var _this4=this;return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(){return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:_context3.prev=0;_context3.next=3;return Repository.getTVL(_this4.stakingContract.methods).then(function(res){if(res)_this4.stakingInfo.TVL=res;});case 3:_context3.next=8;break;case 5:_context3.prev=5;_context3.t0=_context3[\"catch\"](0);return _context3.abrupt(\"return\",_context3.t0);case 8:case\"end\":return _context3.stop();}}},_callee3,null,[[0,5]]);}))();},ApproveMaxBalance:function ApproveMaxBalance(){var _this5=this;return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(){return _regeneratorRuntime.wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:_context4.prev=0;_context4.next=3;return Repository.approveMaxBalance({contract:_this5.SBPContract.methods,stakingAddress:_this5.stakingContract._address,account:_this5.account});case 3:_this5.getAllowance();return _context4.abrupt(\"return\",{result:true,msg:'Approval Success'});case 7:_context4.prev=7;_context4.t0=_context4[\"catch\"](0);return _context4.abrupt(\"return\",{result:false,msg:'Failed Approval'});case 10:case\"end\":return _context4.stop();}}},_callee4,null,[[0,7]]);}))();},getAllowance:function getAllowance(){var _this6=this;return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5(){return _regeneratorRuntime.wrap(function _callee5$(_context5){while(1){switch(_context5.prev=_context5.next){case 0:_context5.prev=0;_context5.next=3;return Repository.getAllowance({contract:_this6.SBPContract.methods,stakingAddress:_this6.stakingContract._address,account:_this6.account}).then(function(res){if(res)_this6.stakingInfo.allowance=res;});case 3:_context5.next=8;break;case 5:_context5.prev=5;_context5.t0=_context5[\"catch\"](0);return _context5.abrupt(\"return\",_context5.t0);case 8:case\"end\":return _context5.stop();}}},_callee5,null,[[0,5]]);}))();},getAccountStakingTotal:function getAccountStakingTotal(){var _this7=this;return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee6(){return _regeneratorRuntime.wrap(function _callee6$(_context6){while(1){switch(_context6.prev=_context6.next){case 0:_context6.prev=0;_context6.next=3;return Repository.getAccountStakingTotal({contract:_this7.stakingContract.methods,account:_this7.account}).then(function(res){if(res)_this7.stakingInfo.accountStakingTotal=res;});case 3:_context6.next=8;break;case 5:_context6.prev=5;_context6.t0=_context6[\"catch\"](0);return _context6.abrupt(\"return\",_context6.t0);case 8:case\"end\":return _context6.stop();}}},_callee6,null,[[0,5]]);}))();},getTotalExpectedReward:function getTotalExpectedReward(){var _this8=this;return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee7(){return _regeneratorRuntime.wrap(function _callee7$(_context7){while(1){switch(_context7.prev=_context7.next){case 0:_context7.prev=0;_context7.next=3;return Repository.getTotalExpectedReward({contract:_this8.stakingContract.methods,account:_this8.account}).then(function(res){if(res)_this8.stakingInfo.totalExpectedReward=res;});case 3:_context7.next=8;break;case 5:_context7.prev=5;_context7.t0=_context7[\"catch\"](0);return _context7.abrupt(\"return\",_context7.t0);case 8:case\"end\":return _context7.stop();}}},_callee7,null,[[0,5]]);}))();},getAccountTier:function getAccountTier(){var _this9=this;return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee8(){return _regeneratorRuntime.wrap(function _callee8$(_context8){while(1){switch(_context8.prev=_context8.next){case 0:_context8.prev=0;_context8.next=3;return Repository.getAccountTier({contract:_this9.stakingContract.methods,account:_this9.account}).then(function(res){if(res)_this9.stakingInfo.tier=res;});case 3:_context8.next=8;break;case 5:_context8.prev=5;_context8.t0=_context8[\"catch\"](0);return _context8.abrupt(\"return\",_context8.t0);case 8:case\"end\":return _context8.stop();}}},_callee8,null,[[0,5]]);}))();},getSBPBalance:function getSBPBalance(){var _this10=this;return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee9(){return _regeneratorRuntime.wrap(function _callee9$(_context9){while(1){switch(_context9.prev=_context9.next){case 0:_context9.prev=0;_context9.next=3;return Repository.getSBPBalance({contract:_this10.SBPContract.methods,account:_this10.account}).then(function(res){if(res)_this10.stakingInfo.SBPBalance=res;});case 3:return _context9.abrupt(\"return\",true);case 6:_context9.prev=6;_context9.t0=_context9[\"catch\"](0);return _context9.abrupt(\"return\",_context9.t0);case 9:case\"end\":return _context9.stop();}}},_callee9,null,[[0,6]]);}))();},getPenaltyFee:function getPenaltyFee(){var _this11=this;return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee10(){return _regeneratorRuntime.wrap(function _callee10$(_context10){while(1){switch(_context10.prev=_context10.next){case 0:_context10.prev=0;_context10.next=3;return Repository.getPenaltyFee({contract:_this11.stakingContract.methods}).then(function(res){if(res)_this11.paneltyFee=res;});case 3:_context10.next=8;break;case 5:_context10.prev=5;_context10.t0=_context10[\"catch\"](0);return _context10.abrupt(\"return\",_context10.t0);case 8:case\"end\":return _context10.stop();}}},_callee10,null,[[0,5]]);}))();},getStakingPool:function getStakingPool(){var _this12=this;return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee12(){return _regeneratorRuntime.wrap(function _callee12$(_context12){while(1){switch(_context12.prev=_context12.next){case 0:_context12.prev=0;_this12.stakingPool=[];_context12.next=4;return Repository.getStorageNumbers({contract:_this12.stakingContract.methods}).then(/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee11(res){var poolInfo,i,pool;return _regeneratorRuntime.wrap(function _callee11$(_context11){while(1){switch(_context11.prev=_context11.next){case 0:if(!(res&&res>0)){_context11.next=12;break;}poolInfo=[];i=0;case 3:if(!(i<res)){_context11.next=11;break;}_context11.next=6;return Repository.getPoolInfo({contract:_this12.stakingContract.methods,storageID:i+1});case 6:pool=_context11.sent;poolInfo.push(_objectSpread({storageId:i+1},pool));case 8:i++;_context11.next=3;break;case 11:_this12.stakingPool=poolInfo;case 12:case\"end\":return _context11.stop();}}},_callee11);}));return function(_x){return _ref3.apply(this,arguments);};}());case 4:_context12.next=9;break;case 6:_context12.prev=6;_context12.t0=_context12[\"catch\"](0);return _context12.abrupt(\"return\",_context12.t0);case 9:case\"end\":return _context12.stop();}}},_callee12,null,[[0,6]]);}))();},getStakeIds:function getStakeIds(){var _this13=this;return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee14(){return _regeneratorRuntime.wrap(function _callee14$(_context14){while(1){switch(_context14.prev=_context14.next){case 0:_context14.prev=0;_this13.stakedPools=[];_context14.next=4;return Repository.getStakeIds({contract:_this13.stakingContract.methods,account:_this13.account}).then(/*#__PURE__*/function(){var _ref4=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee13(res){var i;return _regeneratorRuntime.wrap(function _callee13$(_context13){while(1){switch(_context13.prev=_context13.next){case 0:if(!(res&&res.length>0)){_context13.next=10;break;}_this13.stakeIDs=res;i=0;case 3:if(!(i<res.length)){_context13.next=9;break;}_context13.next=6;return _this13.getStakedPool(res[i]).then(function(res){if(res)_this13.stakedPools.push(res);});case 6:i++;_context13.next=3;break;case 9:setTimeout(function(){},3000);case 10:case\"end\":return _context13.stop();}}},_callee13);}));return function(_x2){return _ref4.apply(this,arguments);};}());case 4:_context14.next=8;break;case 6:_context14.prev=6;_context14.t0=_context14[\"catch\"](0);case 8:case\"end\":return _context14.stop();}}},_callee14,null,[[0,6]]);}))();},getStakedPool:function getStakedPool(stakeId){var _this14=this;return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee15(){var res;return _regeneratorRuntime.wrap(function _callee15$(_context15){while(1){switch(_context15.prev=_context15.next){case 0:_context15.prev=0;_context15.next=3;return Repository.getStakedPool({contract:_this14.stakingContract.methods,account:_this14.account,stakeIds:stakeId});case 3:res=_context15.sent;return _context15.abrupt(\"return\",_objectSpread(_objectSpread({},res),{},{stakingId:stakeId}));case 7:_context15.prev=7;_context15.t0=_context15[\"catch\"](0);console.log(_context15.t0);case 10:case\"end\":return _context15.stop();}}},_callee15,null,[[0,7]]);}))();},stakeSBP:function stakeSBP(_ref5){var _this15=this;return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee16(){var amount,storageId;return _regeneratorRuntime.wrap(function _callee16$(_context16){while(1){switch(_context16.prev=_context16.next){case 0:amount=_ref5.amount,storageId=_ref5.storageId;_context16.next=3;return Repository.stakeSBP({contract:_this15.stakingContract.methods,amounts:amount,storageId:storageId,account:_this15.account});case 3:return _context16.abrupt(\"return\",{result:true,msg:'Succeed Staking SBP'});case 4:case\"end\":return _context16.stop();}}},_callee16);}))();},unStakeSBP:function unStakeSBP(stakedId){var _this16=this;return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee17(){return _regeneratorRuntime.wrap(function _callee17$(_context17){while(1){switch(_context17.prev=_context17.next){case 0:_context17.prev=0;_context17.next=3;return Repository.unStake({contract:_this16.stakingContract.methods,stakedId:stakedId,account:_this16.account});case 3:return _context17.abrupt(\"return\",{result:true,msg:'Succeed Claim Reward'});case 6:_context17.prev=6;_context17.t0=_context17[\"catch\"](0);return _context17.abrupt(\"return\",{result:false,msg:'Failed Claim Reward'});case 9:case\"end\":return _context17.stop();}}},_callee17,null,[[0,6]]);}))();},earlyClaimSBP:function earlyClaimSBP(stakedId){var _this17=this;return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee18(){return _regeneratorRuntime.wrap(function _callee18$(_context18){while(1){switch(_context18.prev=_context18.next){case 0:_context18.prev=0;_context18.next=3;return Repository.earlyClaimSBP({contract:_this17.stakingContract.methods,stakedId:stakedId,account:_this17.account});case 3:return _context18.abrupt(\"return\",{result:true,msg:'Succeed Early Claim Reward'});case 6:_context18.prev=6;_context18.t0=_context18[\"catch\"](0);return _context18.abrupt(\"return\",{result:false,msg:'Failed Claim Early Reward'});case 9:case\"end\":return _context18.stop();}}},_callee18,null,[[0,6]]);}))();},getStakeStatus:function getStakeStatus(stakedId){var _this18=this;return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee19(){return _regeneratorRuntime.wrap(function _callee19$(_context19){while(1){switch(_context19.prev=_context19.next){case 0:_context19.prev=0;_context19.next=3;return Repository.getStakeStatus({contract:_this18.stakingContract.methods,stakedId:stakedId,account:_this18.account});case 3:return _context19.abrupt(\"return\",_context19.sent);case 6:_context19.prev=6;_context19.t0=_context19[\"catch\"](0);case 8:case\"end\":return _context19.stop();}}},_callee19,null,[[0,6]]);}))();},getExpectedPoolReward:function getExpectedPoolReward(stakedId){var _this19=this;return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee20(){return _regeneratorRuntime.wrap(function _callee20$(_context20){while(1){switch(_context20.prev=_context20.next){case 0:_context20.prev=0;_context20.next=3;return Repository.getExpectedPoolReward({contract:_this19.stakingContract.methods,stakedId:stakedId,account:_this19.account});case 3:return _context20.abrupt(\"return\",_context20.sent);case 6:_context20.prev=6;_context20.t0=_context20[\"catch\"](0);case 8:case\"end\":return _context20.stop();}}},_callee20,null,[[0,6]]);}))();}});export default Store;","map":{"version":3,"sources":["C:/Users/user/Desktop/SBPGIT/DAPP_Staking_SBP/src/store/store.js"],"names":["observable","Repository","window","ethereum","Store","account","stakingContract","SBPContract","web3","stakingInfo","TVL","accountStakingTotal","totalExpectedReward","tier","SBPBalance","allowance","stakingPool","stakeIDs","stakedPools","paneltyFee","liqfee","fetchContract","then","res","smartContract_SBP","smartContract_staking","connectWallet","walletConnect","fetchAccountInfo","result","msg","addAccountListner","fetch","on","accounts","location","reload","getAllowance","getAccountStakingTotal","getTotalExpectedReward","getAccountTier","getSBPBalance","getStakeIds","getTVL","methods","ApproveMaxBalance","approveMaxBalance","contract","stakingAddress","_address","getPenaltyFee","getStakingPool","getStorageNumbers","poolInfo","i","getPoolInfo","storageID","pool","push","storageId","length","getStakedPool","setTimeout","stakeId","stakeIds","stakingId","console","log","stakeSBP","amount","amounts","unStakeSBP","stakedId","unStake","earlyClaimSBP","getStakeStatus","getExpectedPoolReward"],"mappings":"orBAAA,OAASA,UAAT,KAA2B,MAA3B,CACA,MAAOC,CAAAA,UAAP,KAAuB,cAAvB,CAEA,YAAqBC,MAArB,CAAQC,QAAR,SAAQA,QAAR,CACA,GAAMC,CAAAA,KAAK,CAAGJ,UAAU,CAAC,CACvBK,OAAO,CAAE,IADc,CAEvBC,eAAe,CAAE,IAFM,CAEA;AACvBC,WAAW,CAAE,IAHU,CAGJ;AACnBC,IAAI,CAAE,IAJiB,CAKvBC,WAAW,CAAE,CACXC,GAAG,CAAE,EADM,CACF;AACTC,mBAAmB,CAAE,CAFV,CAEa;AACxBC,mBAAmB,CAAE,CAHV,CAGa;AACxBC,IAAI,CAAE,EAJK,CAID;AACVC,UAAU,CAAE,CALD,CAKI;AACfC,SAAS,CAAE,CANA,CALU,CAavBC,WAAW,CAAE,EAbU,CAaN;AACjBC,QAAQ,CAAE,EAda,CAcT;AACdC,WAAW,CAAE,EAfU,CAeN;AACjBC,UAAU,CAAE,CAhBW,CAgBR;AACfC,MAAM,CAAE,CAjBe,CAmBjBC,aAnBiB,yBAmBD,wPAEZpB,CAAAA,UAAU,CAACoB,aAAX,GAA2BC,IAA3B,CAAgC,SAAAC,GAAG,CAAI,CAC3C,GAAIA,GAAJ,CAAS,CACP,GAAQC,CAAAA,iBAAR,CAA2DD,GAA3D,CAAQC,iBAAR,CAA2BC,qBAA3B,CAA2DF,GAA3D,CAA2BE,qBAA3B,CAAkDjB,IAAlD,CAA2De,GAA3D,CAAkDf,IAAlD,CACA,KAAI,CAACF,eAAL,CAAuBmB,qBAAvB,CACA,KAAI,CAAClB,WAAL,CAAmBiB,iBAAnB,CACA,KAAI,CAAChB,IAAL,CAAYA,IAAZ,CACD,CACF,CAPK,CAFY,wCAUX,IAVW,kIAcrB,CAjCsB,CAkCjBkB,aAlCiB,yBAkCD,gQAEZzB,CAAAA,UAAU,CAAC0B,aAAX,GAA2BL,IAA3B,CAAgC,SAAAC,GAAG,CAAI,CAC3C,GAAIA,GAAJ,CAAS,CACP,MAAI,CAAClB,OAAL,CAAekB,GAAf,CACA,MAAI,CAACK,gBAAL,GACD,CACF,CALK,CAFY,yCAQX,CAAEC,MAAM,CAAE,IAAV,CAAgBC,GAAG,CAAE,wBAArB,CARW,8FAUX,CAAED,MAAM,CAAE,KAAV,CAAiBC,GAAG,aAApB,CAVW,4EAYrB,CA9CsB,CA+CvBC,iBA/CuB,4BA+CLC,KA/CK,CA+CE,iBACvB7B,QAAQ,CAAC8B,EAAT,CAAY,iBAAZ,CAA+B,cAAgB,kCAAdC,QAAc,UAC7C,MAAI,CAAC7B,OAAL,CAAe6B,QAAf,CACA,MAAI,CAACjB,QAAL,CAAgB,EAAhB,CACA,MAAI,CAACC,WAAL,CAAmB,EAAnB,CACAc,KAAK,GACN,CALD,EAMA7B,QAAQ,CAAC8B,EAAT,CAAY,cAAZ,CAA4B,UAAM,CAChC/B,MAAM,CAACiC,QAAP,CAAgBC,MAAhB,GACD,CAFD,EAGD,CAzDsB,CA0DvBR,gBA1DuB,4BA0DJ,CACjB,KAAKS,YAAL,GACA,KAAKC,sBAAL,GACA,KAAKC,sBAAL,GACA,KAAKC,cAAL,GACA,KAAKC,aAAL,GACA,KAAKC,WAAL,GACA,KAAKC,MAAL,GACD,CAlEsB,CAmEjBA,MAnEiB,kBAmER,gQAEL1C,CAAAA,UAAU,CAAC0C,MAAX,CAAkB,MAAI,CAACrC,eAAL,CAAqBsC,OAAvC,EAAgDtB,IAAhD,CAAqD,SAAAC,GAAG,CAAI,CAChE,GAAIA,GAAJ,CAAS,MAAI,CAACd,WAAL,CAAiBC,GAAjB,CAAuBa,GAAvB,CACV,CAFK,CAFK,mNAQd,CA3EsB,CA4EjBsB,iBA5EiB,6BA4EG,gQAEhB5C,CAAAA,UAAU,CAAC6C,iBAAX,CAA6B,CACjCC,QAAQ,CAAE,MAAI,CAACxC,WAAL,CAAiBqC,OADM,CAEjCI,cAAc,CAAE,MAAI,CAAC1C,eAAL,CAAqB2C,QAFJ,CAGjC5C,OAAO,CAAE,MAAI,CAACA,OAHmB,CAA7B,CAFgB,QAQtB,MAAI,CAACgC,YAAL,GARsB,iCASf,CAAER,MAAM,CAAE,IAAV,CAAgBC,GAAG,CAAE,kBAArB,CATe,8FAWf,CAAED,MAAM,CAAE,KAAV,CAAiBC,GAAG,CAAE,iBAAtB,CAXe,6EAazB,CAzFsB,CA2FjBO,YA3FiB,wBA2FF,gQAEXpC,CAAAA,UAAU,CAACoC,YAAX,CAAwB,CAC5BU,QAAQ,CAAE,MAAI,CAACxC,WAAL,CAAiBqC,OADC,CAE5BI,cAAc,CAAE,MAAI,CAAC1C,eAAL,CAAqB2C,QAFT,CAG5B5C,OAAO,CAAE,MAAI,CAACA,OAHc,CAAxB,EAIHiB,IAJG,CAIE,SAAAC,GAAG,CAAI,CACb,GAAIA,GAAJ,CAAS,MAAI,CAACd,WAAL,CAAiBM,SAAjB,CAA6BQ,GAA7B,CACV,CANK,CAFW,mNAYpB,CAvGsB,CAwGjBe,sBAxGiB,kCAwGQ,gQAErBrC,CAAAA,UAAU,CAACqC,sBAAX,CAAkC,CACtCS,QAAQ,CAAE,MAAI,CAACzC,eAAL,CAAqBsC,OADO,CAEtCvC,OAAO,CAAE,MAAI,CAACA,OAFwB,CAAlC,EAGHiB,IAHG,CAGE,SAAAC,GAAG,CAAI,CACb,GAAIA,GAAJ,CAAS,MAAI,CAACd,WAAL,CAAiBE,mBAAjB,CAAuCY,GAAvC,CACV,CALK,CAFqB,mNAW9B,CAnHsB,CAqHjBgB,sBArHiB,kCAqHQ,gQAErBtC,CAAAA,UAAU,CAACsC,sBAAX,CAAkC,CACtCQ,QAAQ,CAAE,MAAI,CAACzC,eAAL,CAAqBsC,OADO,CAEtCvC,OAAO,CAAE,MAAI,CAACA,OAFwB,CAAlC,EAGHiB,IAHG,CAGE,SAAAC,GAAG,CAAI,CACb,GAAIA,GAAJ,CAAS,MAAI,CAACd,WAAL,CAAiBG,mBAAjB,CAAuCW,GAAvC,CACV,CALK,CAFqB,mNAW9B,CAhIsB,CAiIjBiB,cAjIiB,0BAiIA,gQAEbvC,CAAAA,UAAU,CAACuC,cAAX,CAA0B,CAC9BO,QAAQ,CAAE,MAAI,CAACzC,eAAL,CAAqBsC,OADD,CAE9BvC,OAAO,CAAE,MAAI,CAACA,OAFgB,CAA1B,EAGHiB,IAHG,CAGE,SAAAC,GAAG,CAAI,CACb,GAAIA,GAAJ,CAAS,MAAI,CAACd,WAAL,CAAiBI,IAAjB,CAAwBU,GAAxB,CACV,CALK,CAFa,mNAWtB,CA5IsB,CA6IjBkB,aA7IiB,yBA6ID,iQAEZxC,CAAAA,UAAU,CAACwC,aAAX,CAAyB,CAC7BM,QAAQ,CAAE,OAAI,CAACxC,WAAL,CAAiBqC,OADE,CAE7BvC,OAAO,CAAE,OAAI,CAACA,OAFe,CAAzB,EAGHiB,IAHG,CAGE,SAAAC,GAAG,CAAI,CACb,GAAIA,GAAJ,CAAS,OAAI,CAACd,WAAL,CAAiBK,UAAjB,CAA8BS,GAA9B,CACV,CALK,CAFY,yCAQX,IARW,sLAYrB,CAzJsB,CA0JjB2B,aA1JiB,yBA0JD,wQAEZjD,CAAAA,UAAU,CAACiD,aAAX,CAAyB,CAC7BH,QAAQ,CAAE,OAAI,CAACzC,eAAL,CAAqBsC,OADF,CAAzB,EAEHtB,IAFG,CAEE,SAAAC,GAAG,CAAI,CACb,GAAIA,GAAJ,CAAS,OAAI,CAACJ,UAAL,CAAkBI,GAAlB,CACV,CAJK,CAFY,2NAUrB,CApKsB,CAqKjB4B,cArKiB,0BAqKA,gPAGnB,OAAI,CAACnC,WAAL,CAAmB,EAAnB,CAHmB,wBAIbf,CAAAA,UAAU,CAACmD,iBAAX,CAA6B,CACjCL,QAAQ,CAAE,OAAI,CAACzC,eAAL,CAAqBsC,OADE,CAA7B,EAEHtB,IAFG,2FAEE,mBAAMC,GAAN,mJACFA,GAAG,EAAIA,GAAG,CAAG,CADX,6BAEA8B,QAFA,CAEW,EAFX,CAGKC,CAHL,CAGS,CAHT,aAGYA,CAAC,CAAG/B,GAHhB,qDAIetB,CAAAA,UAAU,CAACsD,WAAX,CAAuB,CACtCR,QAAQ,CAAE,OAAI,CAACzC,eAAL,CAAqBsC,OADO,CAEtCY,SAAS,CAAEF,CAAC,CAAG,CAFuB,CAAvB,CAJf,QAIEG,IAJF,iBAQFJ,QAAQ,CAACK,IAAT,gBAAgBC,SAAS,CAAEL,CAAC,CAAG,CAA/B,EAAqCG,IAArC,GARE,OAGqBH,CAAC,EAHtB,iCAUJ,OAAI,CAACtC,WAAL,CAAmBqC,QAAnB,CAVI,2DAFF,gEAJa,2NAuBtB,CA5LsB,CA6LjBX,WA7LiB,uBA6LH,gPAGhB,OAAI,CAACxB,WAAL,CAAmB,EAAnB,CAHgB,wBAIVjB,CAAAA,UAAU,CAACyC,WAAX,CAAuB,CAC3BK,QAAQ,CAAE,OAAI,CAACzC,eAAL,CAAqBsC,OADJ,CAE3BvC,OAAO,CAAE,OAAI,CAACA,OAFa,CAAvB,EAGHiB,IAHG,2FAGE,mBAAMC,GAAN,qIACFA,GAAG,EAAIA,GAAG,CAACqC,MAAJ,CAAa,CADlB,6BAEJ,OAAI,CAAC3C,QAAL,CAAgBM,GAAhB,CACS+B,CAHL,CAGS,CAHT,aAGYA,CAAC,CAAG/B,GAAG,CAACqC,MAHpB,oDAII,CAAA,OAAI,CAACC,aAAL,CAAmBtC,GAAG,CAAC+B,CAAD,CAAtB,EAA2BhC,IAA3B,CAAgC,SAAAC,GAAG,CAAI,CAC3C,GAAIA,GAAJ,CAAS,OAAI,CAACL,WAAL,CAAiBwC,IAAjB,CAAsBnC,GAAtB,EACV,CAFK,CAJJ,QAG4B+B,CAAC,EAH7B,gCAQJQ,UAAU,CAAC,UAAM,CAAE,CAAT,CAAW,IAAX,CAAV,CARI,2DAHF,iEAJU,0KAmBnB,CAhNsB,CAiNjBD,aAjNiB,wBAiNHE,OAjNG,CAiNM,gRAGP9D,CAAAA,UAAU,CAAC4D,aAAX,CAAyB,CACzCd,QAAQ,CAAE,OAAI,CAACzC,eAAL,CAAqBsC,OADU,CAEzCvC,OAAO,CAAE,OAAI,CAACA,OAF2B,CAGzC2D,QAAQ,CAAED,OAH+B,CAAzB,CAHO,QAGnBxC,GAHmB,kFAQbA,GARa,MAQR0C,SAAS,CAAEF,OARH,kEAUzBG,OAAO,CAACC,GAAR,gBAVyB,6EAY5B,CA7NsB,CA8NjBC,QA9NiB,yBA8Ne,mPAArBC,MAAqB,OAArBA,MAAqB,CAAbV,SAAa,OAAbA,SAAa,yBAC5B1D,CAAAA,UAAU,CAACmE,QAAX,CAAoB,CACxBrB,QAAQ,CAAE,OAAI,CAACzC,eAAL,CAAqBsC,OADP,CAExB0B,OAAO,CAAED,MAFe,CAGxBV,SAAS,CAAEA,SAHa,CAIxBtD,OAAO,CAAE,OAAI,CAACA,OAJU,CAApB,CAD4B,0CAO3B,CAAEwB,MAAM,CAAE,IAAV,CAAgBC,GAAG,CAAE,qBAArB,CAP2B,iEASrC,CAvOsB,CAwOjByC,UAxOiB,qBAwONC,QAxOM,CAwOI,wQAEjBvE,CAAAA,UAAU,CAACwE,OAAX,CAAmB,CACvB1B,QAAQ,CAAE,OAAI,CAACzC,eAAL,CAAqBsC,OADR,CAEvB4B,QAAQ,CAAEA,QAFa,CAIvBnE,OAAO,CAAE,OAAI,CAACA,OAJS,CAAnB,CAFiB,0CAQhB,CAAEwB,MAAM,CAAE,IAAV,CAAgBC,GAAG,CAAE,sBAArB,CARgB,kGAUhB,CAAED,MAAM,CAAE,KAAV,CAAiBC,GAAG,CAAE,qBAAtB,CAVgB,8EAY1B,CApPsB,CAqPjB4C,aArPiB,wBAqPHF,QArPG,CAqPO,wQAEpBvE,CAAAA,UAAU,CAACyE,aAAX,CAAyB,CAC7B3B,QAAQ,CAAE,OAAI,CAACzC,eAAL,CAAqBsC,OADF,CAE7B4B,QAAQ,CAAEA,QAFmB,CAG7BnE,OAAO,CAAE,OAAI,CAACA,OAHe,CAAzB,CAFoB,0CAOnB,CAAEwB,MAAM,CAAE,IAAV,CAAgBC,GAAG,CAAE,4BAArB,CAPmB,kGASnB,CAAED,MAAM,CAAE,KAAV,CAAiBC,GAAG,CAAE,2BAAtB,CATmB,8EAW7B,CAhQsB,CAiQjB6C,cAjQiB,yBAiQFH,QAjQE,CAiQQ,wQAEdvE,CAAAA,UAAU,CAAC0E,cAAX,CAA0B,CACrC5B,QAAQ,CAAE,OAAI,CAACzC,eAAL,CAAqBsC,OADM,CAErC4B,QAAQ,CAAEA,QAF2B,CAGrCnE,OAAO,CAAE,OAAI,CAACA,OAHuB,CAA1B,CAFc,qMAU9B,CA3QsB,CA4QjBuE,qBA5QiB,gCA4QKJ,QA5QL,CA4Qe,wQAErBvE,CAAAA,UAAU,CAAC2E,qBAAX,CAAiC,CAC5C7B,QAAQ,CAAE,OAAI,CAACzC,eAAL,CAAqBsC,OADa,CAE5C4B,QAAQ,CAAEA,QAFkC,CAG5CnE,OAAO,CAAE,OAAI,CAACA,OAH8B,CAAjC,CAFqB,qMAUrC,CAtRsB,CAAD,CAAxB,CAyRA,cAAeD,CAAAA,KAAf","sourcesContent":["import { observable } from 'mobx';\nimport Repository from './repository';\n\nconst { ethereum } = window;\nconst Store = observable({\n  account: null,\n  stakingContract: null, //SHIBA STAKING SMART CONTRACT\n  SBPContract: null, // $SBP SMART CONTRACT\n  web3: null,\n  stakingInfo: {\n    TVL: '', // total value locked\n    accountStakingTotal: 0, // Your SBPS in Staking\n    totalExpectedReward: 0, // Total Expected Reward\n    tier: '', // Account Tier\n    SBPBalance: 0, // Account $SBP Balance\n    allowance: 0,\n  },\n  stakingPool: [], //Staking Pools\n  stakeIDs: [], // StakeIDs of Account\n  stakedPools: [], //Staked Pool of Account\n  paneltyFee: 0, // Panelty Fee\n  liqfee: 0,\n\n  async fetchContract() {\n    try {\n      await Repository.fetchContract().then(res => {\n        if (res) {\n          const { smartContract_SBP, smartContract_staking, web3 } = res;\n          this.stakingContract = smartContract_staking;\n          this.SBPContract = smartContract_SBP;\n          this.web3 = web3;\n        }\n      });\n      return true;\n    } catch (err) {\n      // console.log('err: ', err);\n    }\n  },\n  async connectWallet() {\n    try {\n      await Repository.walletConnect().then(res => {\n        if (res) {\n          this.account = res;\n          this.fetchAccountInfo();\n        }\n      });\n      return { result: true, msg: 'Succeed Connect Wallet' };\n    } catch (err) {\n      return { result: false, msg: err };\n    }\n  },\n  addAccountListner(fetch) {\n    ethereum.on('accountsChanged', ([accounts]) => {\n      this.account = accounts;\n      this.stakeIDs = [];\n      this.stakedPools = [];\n      fetch();\n    });\n    ethereum.on('chainChanged', () => {\n      window.location.reload();\n    });\n  },\n  fetchAccountInfo() {\n    this.getAllowance();\n    this.getAccountStakingTotal();\n    this.getTotalExpectedReward();\n    this.getAccountTier();\n    this.getSBPBalance();\n    this.getStakeIds();\n    this.getTVL();\n  },\n  async getTVL() {\n    try {\n      await Repository.getTVL(this.stakingContract.methods).then(res => {\n        if (res) this.stakingInfo.TVL = res;\n      });\n    } catch (err) {\n      return err;\n    }\n  },\n  async ApproveMaxBalance() {\n    try {\n      await Repository.approveMaxBalance({\n        contract: this.SBPContract.methods,\n        stakingAddress: this.stakingContract._address,\n        account: this.account,\n      });\n\n      this.getAllowance();\n      return { result: true, msg: 'Approval Success' };\n    } catch (err) {\n      return { result: false, msg: 'Failed Approval' };\n    }\n  },\n\n  async getAllowance() {\n    try {\n      await Repository.getAllowance({\n        contract: this.SBPContract.methods,\n        stakingAddress: this.stakingContract._address,\n        account: this.account,\n      }).then(res => {\n        if (res) this.stakingInfo.allowance = res;\n      });\n    } catch (err) {\n      return err;\n    }\n  },\n  async getAccountStakingTotal() {\n    try {\n      await Repository.getAccountStakingTotal({\n        contract: this.stakingContract.methods,\n        account: this.account,\n      }).then(res => {\n        if (res) this.stakingInfo.accountStakingTotal = res;\n      });\n    } catch (err) {\n      return err;\n    }\n  },\n\n  async getTotalExpectedReward() {\n    try {\n      await Repository.getTotalExpectedReward({\n        contract: this.stakingContract.methods,\n        account: this.account,\n      }).then(res => {\n        if (res) this.stakingInfo.totalExpectedReward = res;\n      });\n    } catch (err) {\n      return err;\n    }\n  },\n  async getAccountTier() {\n    try {\n      await Repository.getAccountTier({\n        contract: this.stakingContract.methods,\n        account: this.account,\n      }).then(res => {\n        if (res) this.stakingInfo.tier = res;\n      });\n    } catch (err) {\n      return err;\n    }\n  },\n  async getSBPBalance() {\n    try {\n      await Repository.getSBPBalance({\n        contract: this.SBPContract.methods,\n        account: this.account,\n      }).then(res => {\n        if (res) this.stakingInfo.SBPBalance = res;\n      });\n      return true;\n    } catch (err) {\n      return err;\n    }\n  },\n  async getPenaltyFee() {\n    try {\n      await Repository.getPenaltyFee({\n        contract: this.stakingContract.methods,\n      }).then(res => {\n        if (res) this.paneltyFee = res;\n      });\n    } catch (err) {\n      return err;\n    }\n  },\n  async getStakingPool() {\n    //storageID (풀 종류) 조회\n    try {\n      this.stakingPool = [];\n      await Repository.getStorageNumbers({\n        contract: this.stakingContract.methods,\n      }).then(async res => {\n        if (res && res > 0) {\n          let poolInfo = [];\n          for (let i = 0; i < res; i++) {\n            let pool = await Repository.getPoolInfo({\n              contract: this.stakingContract.methods,\n              storageID: i + 1,\n            });\n            poolInfo.push({ storageId: i + 1, ...pool });\n          }\n          this.stakingPool = poolInfo;\n        }\n        // console.log('stakingPool: ', this.stakingPool);\n      });\n    } catch (err) {\n      return err;\n    }\n  },\n  async getStakeIds() {\n    //유저가 stakedid 목록 조회\n    try {\n      this.stakedPools = [];\n      await Repository.getStakeIds({\n        contract: this.stakingContract.methods,\n        account: this.account,\n      }).then(async res => {\n        if (res && res.length > 0) {\n          this.stakeIDs = res;\n          for (let i = 0; i < res.length; i++) {\n            await this.getStakedPool(res[i]).then(res => {\n              if (res) this.stakedPools.push(res);\n            });\n          }\n          setTimeout(() => {}, 3000);\n        }\n      });\n    } catch (err) {}\n  },\n  async getStakedPool(stakeId) {\n    //staking 한 stakeid로 pool 검색\n    try {\n      const res = await Repository.getStakedPool({\n        contract: this.stakingContract.methods,\n        account: this.account,\n        stakeIds: stakeId,\n      });\n      return { ...res, stakingId: stakeId };\n    } catch (err) {\n      console.log(err);\n    }\n  },\n  async stakeSBP({ amount, storageId }) {\n      await Repository.stakeSBP({\n        contract: this.stakingContract.methods,\n        amounts: amount,\n        storageId: storageId,\n        account: this.account,\n      });\n      return { result: true, msg: 'Succeed Staking SBP' };\n\n  },\n  async unStakeSBP(stakedId) {\n    try {\n      await Repository.unStake({\n        contract: this.stakingContract.methods,\n        stakedId: stakedId,\n\n        account: this.account,\n      });\n      return { result: true, msg: 'Succeed Claim Reward' };\n    } catch (err) {\n      return { result: false, msg: 'Failed Claim Reward' };\n    }\n  },\n  async earlyClaimSBP(stakedId) {\n    try {\n      await Repository.earlyClaimSBP({\n        contract: this.stakingContract.methods,\n        stakedId: stakedId,\n        account: this.account,\n      });\n      return { result: true, msg: 'Succeed Early Claim Reward' };\n    } catch (err) {\n      return { result: false, msg: 'Failed Claim Early Reward' };\n    }\n  },\n  async getStakeStatus(stakedId) {\n    try {\n      return await Repository.getStakeStatus({\n        contract: this.stakingContract.methods,\n        stakedId: stakedId,\n        account: this.account,\n      });\n    } catch (err) {\n      //\n    }\n  },\n  async getExpectedPoolReward(stakedId) {\n    try {\n      return await Repository.getExpectedPoolReward({\n        contract: this.stakingContract.methods,\n        stakedId: stakedId,\n        account: this.account,\n      });\n    } catch (err) {\n      //\n    }\n  },\n});\n\nexport default Store;\n"]},"metadata":{},"sourceType":"module"}