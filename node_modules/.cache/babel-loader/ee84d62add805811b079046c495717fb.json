{"ast":null,"code":"import { observable } from 'mobx';\nimport Repository from './repository';\nconst {\n  ethereum\n} = window;\nconst Store = observable({\n  account: null,\n  stakingContract: null,\n  //SHIBA STAKING SMART CONTRACT\n  SBPContract: null,\n  // $SBP SMART CONTRACT\n  web3: null,\n  stakingInfo: {\n    TVL: '',\n    // total value locked\n    accountStakingTotal: 0,\n    // Your SBPS in Staking\n    totalExpectedReward: 0,\n    // Total Expected Reward\n    tier: '',\n    // Account Tier\n    SBPBalance: 0,\n    // Account $SBP Balance\n    allowance: 0\n  },\n  stakingPool: [],\n  //Staking Pools\n  stakeIDs: [],\n  // StakeIDs of Account\n  stakedPools: [],\n  //Staked Pool of Account\n  paneltyFee: 0,\n  // Panelty Fee\n  liqfee: 0,\n\n  async fetchContract() {\n    try {\n      await Repository.fetchContract().then(res => {\n        if (res) {\n          const {\n            smartContract_SBP,\n            smartContract_staking,\n            web3\n          } = res;\n          this.stakingContract = smartContract_staking;\n          this.SBPContract = smartContract_SBP;\n          this.web3 = web3;\n        }\n      });\n      return true;\n    } catch (err) {// console.log('err: ', err);\n    }\n  },\n\n  async connectWallet() {\n    try {\n      await Repository.walletConnect().then(res => {\n        if (res) {\n          this.account = res;\n          this.fetchAccountInfo();\n        }\n      });\n      return {\n        result: true,\n        msg: 'Succeed Connect Wallet'\n      };\n    } catch (err) {\n      return {\n        result: false,\n        msg: err\n      };\n    }\n  },\n\n  addAccountListner(fetch) {\n    ethereum.on('accountsChanged', _ref => {\n      let [accounts] = _ref;\n      this.account = accounts;\n      this.stakeIDs = [];\n      this.stakedPools = [];\n      fetch();\n    });\n    ethereum.on('chainChanged', () => {\n      window.location.reload();\n    });\n  },\n\n  fetchAccountInfo() {\n    this.getAllowance();\n    this.getAccountStakingTotal();\n    this.getTotalExpectedReward();\n    this.getAccountTier();\n    this.getSBPBalance();\n    this.getStakeIds();\n    this.getTVL();\n  },\n\n  async getTVL() {\n    try {\n      await Repository.getTVL(this.stakingContract.methods).then(res => {\n        if (res) this.stakingInfo.TVL = res;\n      });\n    } catch (err) {\n      return err;\n    }\n  },\n\n  async ApproveMaxBalance() {\n    try {\n      await Repository.approveMaxBalance({\n        contract: this.SBPContract.methods,\n        stakingAddress: this.stakingContract._address,\n        account: this.account\n      });\n      this.getAllowance();\n      return {\n        result: true,\n        msg: 'Approval Success'\n      };\n    } catch (err) {\n      return {\n        result: false,\n        msg: 'Failed Approval'\n      };\n    }\n  },\n\n  async getAllowance() {\n    try {\n      await Repository.getAllowance({\n        contract: this.SBPContract.methods,\n        stakingAddress: this.stakingContract._address,\n        account: this.account\n      }).then(res => {\n        if (res) this.stakingInfo.allowance = res;\n      });\n    } catch (err) {\n      return err;\n    }\n  },\n\n  async getAccountStakingTotal() {\n    try {\n      await Repository.getAccountStakingTotal({\n        contract: this.stakingContract.methods,\n        account: this.account\n      }).then(res => {\n        if (res) this.stakingInfo.accountStakingTotal = res;\n      });\n    } catch (err) {\n      return err;\n    }\n  },\n\n  async getTotalExpectedReward() {\n    try {\n      await Repository.getTotalExpectedReward({\n        contract: this.stakingContract.methods,\n        account: this.account\n      }).then(res => {\n        if (res) this.stakingInfo.totalExpectedReward = res;\n      });\n    } catch (err) {\n      return err;\n    }\n  },\n\n  async getAccountTier() {\n    try {\n      await Repository.getAccountTier({\n        contract: this.stakingContract.methods,\n        account: this.account\n      }).then(res => {\n        if (res) this.stakingInfo.tier = res;\n      });\n    } catch (err) {\n      return err;\n    }\n  },\n\n  async getSBPBalance() {\n    try {\n      await Repository.getSBPBalance({\n        contract: this.SBPContract.methods,\n        account: this.account\n      }).then(res => {\n        if (res) this.stakingInfo.SBPBalance = res;\n      });\n      return true;\n    } catch (err) {\n      return err;\n    }\n  },\n\n  async getPenaltyFee() {\n    try {\n      await Repository.getPenaltyFee({\n        contract: this.stakingContract.methods\n      }).then(res => {\n        if (res) this.paneltyFee = res;\n      });\n    } catch (err) {\n      return err;\n    }\n  },\n\n  async getStakingPool() {\n    //storageID (풀 종류) 조회\n    try {\n      this.stakingPool = [];\n      await Repository.getStorageNumbers({\n        contract: this.stakingContract.methods\n      }).then(async res => {\n        if (res && res > 0) {\n          let poolInfo = [];\n\n          for (let i = 0; i < res; i++) {\n            let pool = await Repository.getPoolInfo({\n              contract: this.stakingContract.methods,\n              storageID: i + 1\n            });\n            poolInfo.push({\n              storageId: i + 1,\n              ...pool\n            });\n          }\n\n          this.stakingPool = poolInfo;\n        } // console.log('stakingPool: ', this.stakingPool);\n\n      });\n    } catch (err) {\n      return err;\n    }\n  },\n\n  async getStakeIds() {\n    //유저가 stakedid 목록 조회\n    try {\n      this.stakedPools = [];\n      await Repository.getStakeIds({\n        contract: this.stakingContract.methods,\n        account: this.account\n      }).then(async res => {\n        if (res && res.length > 0) {\n          this.stakeIDs = res;\n\n          for (let i = 0; i < res.length; i++) {\n            await this.getStakedPool(res[i]).then(res => {\n              if (res) this.stakedPools.push(res);\n            });\n          }\n\n          setTimeout(() => {}, 3000);\n        }\n      });\n    } catch (err) {}\n  },\n\n  async getStakedPool(stakeId) {\n    //staking 한 stakeid로 pool 검색\n    try {\n      const res = await Repository.getStakedPool({\n        contract: this.stakingContract.methods,\n        account: this.account,\n        stakeIds: stakeId\n      });\n      return { ...res,\n        stakingId: stakeId\n      };\n    } catch (err) {\n      console.log(err);\n    }\n  },\n\n  async stakeSBP(_ref2) {\n    let {\n      amount,\n      storageId\n    } = _ref2;\n\n    try {\n      await Repository.stakeSBP({\n        contract: this.stakingContract.methods,\n        amounts: 'amount*10**18',\n        storageId: storageId,\n        account: this.account\n      });\n      return {\n        result: true,\n        msg: 'Succeed Staking SBP'\n      };\n    } catch (err) {\n      return {\n        result: false,\n        msg: 'Failed Staking SBP'\n      };\n    }\n  },\n\n  async unStakeSBP(stakedId) {\n    try {\n      await Repository.unStake({\n        contract: this.stakingContract.methods,\n        stakedId: stakedId,\n        account: this.account\n      });\n      return {\n        result: true,\n        msg: 'Succeed Claim Reward'\n      };\n    } catch (err) {\n      return {\n        result: false,\n        msg: 'Failed Claim Reward'\n      };\n    }\n  },\n\n  async earlyClaimSBP(stakedId) {\n    try {\n      await Repository.earlyClaimSBP({\n        contract: this.stakingContract.methods,\n        stakedId: stakedId,\n        account: this.account\n      });\n      return {\n        result: true,\n        msg: 'Succeed Early Claim Reward'\n      };\n    } catch (err) {\n      return {\n        result: false,\n        msg: 'Failed Claim Early Reward'\n      };\n    }\n  },\n\n  async getStakeStatus(stakedId) {\n    try {\n      return await Repository.getStakeStatus({\n        contract: this.stakingContract.methods,\n        stakedId: stakedId,\n        account: this.account\n      });\n    } catch (err) {//\n    }\n  },\n\n  async getExpectedPoolReward(stakedId) {\n    try {\n      return await Repository.getExpectedPoolReward({\n        contract: this.stakingContract.methods,\n        stakedId: stakedId,\n        account: this.account\n      });\n    } catch (err) {//\n    }\n  }\n\n});\nexport default Store;","map":{"version":3,"sources":["C:/Users/user/Desktop/SBPGIT/DAPP_Staking_SBP/src/store/store.js"],"names":["observable","Repository","ethereum","window","Store","account","stakingContract","SBPContract","web3","stakingInfo","TVL","accountStakingTotal","totalExpectedReward","tier","SBPBalance","allowance","stakingPool","stakeIDs","stakedPools","paneltyFee","liqfee","fetchContract","then","res","smartContract_SBP","smartContract_staking","err","connectWallet","walletConnect","fetchAccountInfo","result","msg","addAccountListner","fetch","on","accounts","location","reload","getAllowance","getAccountStakingTotal","getTotalExpectedReward","getAccountTier","getSBPBalance","getStakeIds","getTVL","methods","ApproveMaxBalance","approveMaxBalance","contract","stakingAddress","_address","getPenaltyFee","getStakingPool","getStorageNumbers","poolInfo","i","pool","getPoolInfo","storageID","push","storageId","length","getStakedPool","setTimeout","stakeId","stakeIds","stakingId","console","log","stakeSBP","amount","amounts","unStakeSBP","stakedId","unStake","earlyClaimSBP","getStakeStatus","getExpectedPoolReward"],"mappings":"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","sourcesContent":["import { observable } from 'mobx';\nimport Repository from './repository';\nconst { ethereum } = window;\nconst Store = observable({\n  account: null,\n  stakingContract: null, //SHIBA STAKING SMART CONTRACT\n  SBPContract: null, // $SBP SMART CONTRACT\n  web3: null,\n  stakingInfo: {\n    TVL: '', // total value locked\n    accountStakingTotal: 0, // Your SBPS in Staking\n    totalExpectedReward: 0, // Total Expected Reward\n    tier: '', // Account Tier\n    SBPBalance: 0, // Account $SBP Balance\n    allowance: 0,\n  },\n  stakingPool: [], //Staking Pools\n  stakeIDs: [], // StakeIDs of Account\n  stakedPools: [], //Staked Pool of Account\n  paneltyFee: 0, // Panelty Fee\n  liqfee: 0,\n\n  async fetchContract() {\n    try {\n      await Repository.fetchContract().then(res => {\n        if (res) {\n          const { smartContract_SBP, smartContract_staking, web3 } = res;\n          this.stakingContract = smartContract_staking;\n          this.SBPContract = smartContract_SBP;\n          this.web3 = web3;\n        }\n      });\n      return true;\n    } catch (err) {\n      // console.log('err: ', err);\n    }\n  },\n  async connectWallet() {\n    try {\n      await Repository.walletConnect().then(res => {\n        if (res) {\n          this.account = res;\n          this.fetchAccountInfo();\n        }\n      });\n      return { result: true, msg: 'Succeed Connect Wallet' };\n    } catch (err) {\n      return { result: false, msg: err };\n    }\n  },\n  addAccountListner(fetch) {\n    ethereum.on('accountsChanged', ([accounts]) => {\n      this.account = accounts;\n      this.stakeIDs = [];\n      this.stakedPools = [];\n      fetch();\n    });\n    ethereum.on('chainChanged', () => {\n      window.location.reload();\n    });\n  },\n  fetchAccountInfo() {\n    this.getAllowance();\n    this.getAccountStakingTotal();\n    this.getTotalExpectedReward();\n    this.getAccountTier();\n    this.getSBPBalance();\n    this.getStakeIds();\n    this.getTVL();\n  },\n  async getTVL() {\n    try {\n      await Repository.getTVL(this.stakingContract.methods).then(res => {\n        if (res) this.stakingInfo.TVL = res;\n      });\n    } catch (err) {\n      return err;\n    }\n  },\n  async ApproveMaxBalance() {\n    try {\n      await Repository.approveMaxBalance({\n        contract: this.SBPContract.methods,\n        stakingAddress: this.stakingContract._address,\n        account: this.account,\n      });\n\n      this.getAllowance();\n      return { result: true, msg: 'Approval Success' };\n    } catch (err) {\n      return { result: false, msg: 'Failed Approval' };\n    }\n  },\n\n  async getAllowance() {\n    try {\n      await Repository.getAllowance({\n        contract: this.SBPContract.methods,\n        stakingAddress: this.stakingContract._address,\n        account: this.account,\n      }).then(res => {\n        if (res) this.stakingInfo.allowance = res;\n      });\n    } catch (err) {\n      return err;\n    }\n  },\n  async getAccountStakingTotal() {\n    try {\n      await Repository.getAccountStakingTotal({\n        contract: this.stakingContract.methods,\n        account: this.account,\n      }).then(res => {\n        if (res) this.stakingInfo.accountStakingTotal = res;\n      });\n    } catch (err) {\n      return err;\n    }\n  },\n\n  async getTotalExpectedReward() {\n    try {\n      await Repository.getTotalExpectedReward({\n        contract: this.stakingContract.methods,\n        account: this.account,\n      }).then(res => {\n        if (res) this.stakingInfo.totalExpectedReward = res;\n      });\n    } catch (err) {\n      return err;\n    }\n  },\n  async getAccountTier() {\n    try {\n      await Repository.getAccountTier({\n        contract: this.stakingContract.methods,\n        account: this.account,\n      }).then(res => {\n        if (res) this.stakingInfo.tier = res;\n      });\n    } catch (err) {\n      return err;\n    }\n  },\n  async getSBPBalance() {\n    try {\n      await Repository.getSBPBalance({\n        contract: this.SBPContract.methods,\n        account: this.account,\n      }).then(res => {\n        if (res) this.stakingInfo.SBPBalance = res;\n      });\n      return true;\n    } catch (err) {\n      return err;\n    }\n  },\n  async getPenaltyFee() {\n    try {\n      await Repository.getPenaltyFee({\n        contract: this.stakingContract.methods,\n      }).then(res => {\n        if (res) this.paneltyFee = res;\n      });\n    } catch (err) {\n      return err;\n    }\n  },\n  async getStakingPool() {\n    //storageID (풀 종류) 조회\n    try {\n      this.stakingPool = [];\n      await Repository.getStorageNumbers({\n        contract: this.stakingContract.methods,\n      }).then(async res => {\n        if (res && res > 0) {\n          let poolInfo = [];\n          for (let i = 0; i < res; i++) {\n            let pool = await Repository.getPoolInfo({\n              contract: this.stakingContract.methods,\n              storageID: i + 1,\n            });\n            poolInfo.push({ storageId: i + 1, ...pool });\n          }\n          this.stakingPool = poolInfo;\n        }\n        // console.log('stakingPool: ', this.stakingPool);\n      });\n    } catch (err) {\n      return err;\n    }\n  },\n  async getStakeIds() {\n    //유저가 stakedid 목록 조회\n    try {\n      this.stakedPools = [];\n      await Repository.getStakeIds({\n        contract: this.stakingContract.methods,\n        account: this.account,\n      }).then(async res => {\n        if (res && res.length > 0) {\n          this.stakeIDs = res;\n          for (let i = 0; i < res.length; i++) {\n            await this.getStakedPool(res[i]).then(res => {\n              if (res) this.stakedPools.push(res);\n            });\n          }\n          setTimeout(() => {}, 3000);\n        }\n      });\n    } catch (err) {}\n  },\n  async getStakedPool(stakeId) {\n    //staking 한 stakeid로 pool 검색\n    try {\n      const res = await Repository.getStakedPool({\n        contract: this.stakingContract.methods,\n        account: this.account,\n        stakeIds: stakeId,\n      });\n      return { ...res, stakingId: stakeId };\n    } catch (err) {\n      console.log(err);\n    }\n  },\n  async stakeSBP({ amount, storageId }) {\n    try {\n      await Repository.stakeSBP({\n        contract: this.stakingContract.methods,\n        amounts: 'amount*10**18',\n        storageId: storageId,\n        account: this.account,\n      });\n      return { result: true, msg: 'Succeed Staking SBP' };\n    } catch (err) {\n      return { result: false, msg: 'Failed Staking SBP' };\n    }\n  },\n  async unStakeSBP(stakedId) {\n    try {\n      await Repository.unStake({\n        contract: this.stakingContract.methods,\n        stakedId: stakedId,\n\n        account: this.account,\n      });\n      return { result: true, msg: 'Succeed Claim Reward' };\n    } catch (err) {\n      return { result: false, msg: 'Failed Claim Reward' };\n    }\n  },\n  async earlyClaimSBP(stakedId) {\n    try {\n      await Repository.earlyClaimSBP({\n        contract: this.stakingContract.methods,\n        stakedId: stakedId,\n        account: this.account,\n      });\n      return { result: true, msg: 'Succeed Early Claim Reward' };\n    } catch (err) {\n      return { result: false, msg: 'Failed Claim Early Reward' };\n    }\n  },\n  async getStakeStatus(stakedId) {\n    try {\n      return await Repository.getStakeStatus({\n        contract: this.stakingContract.methods,\n        stakedId: stakedId,\n        account: this.account,\n      });\n    } catch (err) {\n      //\n    }\n  },\n  async getExpectedPoolReward(stakedId) {\n    try {\n      return await Repository.getExpectedPoolReward({\n        contract: this.stakingContract.methods,\n        stakedId: stakedId,\n        account: this.account,\n      });\n    } catch (err) {\n      //\n    }\n  },\n});\n\nexport default Store;\n"]},"metadata":{},"sourceType":"module"}