{"ast":null,"code":"import Web3 from 'web3';\nimport Web3EthContract from 'web3-eth-contract';\nconst {\n  ethereum\n} = window;\nconst metamaskIsInstalled = ethereum && ethereum.isMetaMask;\nlet web3;\nlet abi_SBP;\nlet abi_staking;\nlet CONFIG_SBP;\nlet CONFIG_staking;\n\nif (metamaskIsInstalled) {\n  Web3EthContract.setProvider(ethereum);\n  web3 = new Web3(ethereum);\n}\n\nconst Repository = {\n  fetchContract: async () => {\n    abi_SBP = await fetch('/config/abi_SBP.json', {\n      headers: {\n        'Content-Type': 'application/json',\n        Accept: 'application/json'\n      }\n    }).then(res => {\n      return res.json();\n    });\n    abi_staking = await fetch('/config/abi_staking.json', {\n      headers: {\n        'Content-Type': 'application/json',\n        Accept: 'application/json'\n      }\n    }).then(res => {\n      return res.json();\n    });\n    CONFIG_SBP = await fetch('/config/config_SBP.json', {\n      headers: {\n        'Content-Type': 'application/json',\n        Accept: 'application/json'\n      }\n    }).then(res => {\n      return res.json();\n    });\n    CONFIG_staking = await fetch('/config/config_staking.json', {\n      headers: {\n        'Content-Type': 'application/json',\n        Accept: 'application/json'\n      }\n    }).then(res => {\n      return res.json();\n    });\n    const smartContractObj_SBP = new Web3EthContract(abi_SBP, CONFIG_SBP.CONTRACT_ADDRESS);\n    const smartContractObj_staking = new Web3EthContract(abi_staking, CONFIG_staking.CONTRACT_ADDRESS);\n    return {\n      smartContract_SBP: smartContractObj_SBP,\n      smartContract_staking: smartContractObj_staking,\n      web3: web3\n    };\n  },\n  walletConnect: async () => {\n    if (metamaskIsInstalled) {\n      try {\n        const [accounts] = await ethereum.request({\n          method: 'eth_requestAccounts'\n        });\n        const networkId = await ethereum.request({\n          method: 'net_version'\n        });\n\n        if (networkId == CONFIG_staking.NETWORK.ID) {\n          return accounts; // Add listeners end\n        } else {\n          throw 'netErr';\n        }\n      } catch (err) {\n        if (err === 'netErr') throw `Change network to ${CONFIG_staking.NETWORK.NAME}.`;else throw new Error('Something went wrong.');\n      }\n    }\n  },\n  getTVL: async contract => {\n    try {\n      const res = await contract.StakerTVL().call();\n      return res;\n    } catch (err) {\n      throw new Error('Failed Getting Total_Value_Locked !');\n    }\n  },\n  approveMaxBalance: async _ref => {\n    let {\n      contract,\n      stakingAddress,\n      account\n    } = _ref;\n\n    try {\n      const res = await contract.approveMax(stakingAddress).send({\n        from: account\n      });\n      return res;\n    } catch (err) {\n      throw new Error('Failed Getting ApproveMax');\n    }\n  },\n  getAllowance: async _ref2 => {\n    let {\n      contract,\n      stakingAddress,\n      account\n    } = _ref2;\n\n    try {\n      console.log('111');\n      const res = await contract.allowance(account, stakingAddress).call();\n      return res;\n    } catch (err) {\n      throw new Error('Failed Getting Allowance');\n    }\n  },\n  getAccountStakingTotal: async _ref3 => {\n    let {\n      contract,\n      account\n    } = _ref3;\n\n    try {\n      const res = await contract.AccountStakingTotal(account).call();\n      return res;\n    } catch (err) {\n      throw new Error('Failed Getting Account Staking Total !');\n    }\n  },\n  getTotalExpectedReward: async _ref4 => {\n    let {\n      contract,\n      account\n    } = _ref4;\n\n    try {\n      const res = await contract.getTotalRewardsExpected(account).call();\n      return res;\n    } catch (err) {\n      throw new Error('Failed Getting Account Staking Total !');\n    }\n  },\n  getAccountTier: async _ref5 => {\n    let {\n      contract,\n      account\n    } = _ref5;\n\n    try {\n      const res = await contract.AccountTier(account).call();\n\n      if (res === 2) {\n        return 'Silver';\n      } else if (res === 3) {\n        return 'Gold';\n      } else if (res === 4) {\n        return 'Platinum';\n      } else if (res === 5) {\n        return 'Diamond';\n      } else {\n        return 'None';\n      }\n    } catch (err) {\n      throw new Error('Failed Getting Accounnt Tier !');\n    }\n  },\n  getSBPBalance: async _ref6 => {\n    let {\n      contract,\n      account\n    } = _ref6;\n\n    try {\n      const res = await contract.balanceOf(account).call();\n      return res;\n    } catch (err) {\n      throw new Error('Failed Getting Balance !');\n    }\n  },\n  getPenaltyFee: async _ref7 => {\n    let {\n      contract\n    } = _ref7;\n\n    try {\n      const res = await contract.getPenaltyFee().call(); // console.log(res);\n\n      return res;\n    } catch (err) {\n      throw new Error('Failed Getting PenaltyFee');\n    }\n  },\n  getStorageNumbers: async _ref8 => {\n    let {\n      contract\n    } = _ref8;\n\n    try {\n      const res = await contract.getStorageNumbers().call(); // console.log('storageNum: ', res);\n\n      return res;\n    } catch (err) {\n      throw new Error('Failed Getting Pool Number');\n    }\n  },\n  getPoolInfo: async _ref9 => {\n    let {\n      contract,\n      storageID\n    } = _ref9;\n\n    try {\n      const res = await contract.storages(storageID).call();\n      return res;\n    } catch (err) {\n      throw new Error('Failed Getting Pool Number');\n    }\n  },\n  getStakeIds: async _ref10 => {\n    let {\n      contract,\n      account\n    } = _ref10;\n\n    try {\n      const res = await contract.StakeIDs(account).call();\n      return res;\n    } catch (err) {\n      throw new Error('Failed Getting StakeIDs');\n    }\n  },\n  getStakedPool: async _ref11 => {\n    let {\n      contract,\n      account,\n      stakeIds\n    } = _ref11;\n\n    try {\n      const res = await contract.pools(account, stakeIds).call();\n      return res;\n    } catch (err) {\n      throw new Error('Faild Getting Pool Info');\n    }\n  },\n  stakeSBP: async _ref12 => {\n    let {\n      contract,\n      amount,\n      storageId,\n      account\n    } = _ref12;\n    var amounts = web3.utils.toWei('' + amount, 'ether');\n    const res = await contract.StakeSBP(amounts, storageId).send({\n      from: account\n    }); // console.log('res', res);\n\n    return res;\n  },\n  unStake: async _ref13 => {\n    let {\n      contract,\n      stakedId,\n      account\n    } = _ref13;\n\n    try {\n      const res = await contract.unstakeSBP(stakedId).send({\n        from: account\n      }); // console.log('unstakeSBP', res);\n\n      return res;\n    } catch (err) {\n      throw new Error('Failed Claim Reward');\n    }\n  },\n  earlyClaimSBP: async _ref14 => {\n    let {\n      contract,\n      stakedId,\n      account\n    } = _ref14;\n\n    try {\n      const res = await contract.earlyClaimSBP(stakedId).send({\n        from: account\n      }); // console.log('earlyClaimSBP', res);\n\n      return res;\n    } catch (err) {\n      throw new Error('Failed Claim Early Reward');\n    }\n  },\n  getStakeStatus: async _ref15 => {\n    let {\n      contract,\n      stakedId,\n      account\n    } = _ref15;\n\n    try {\n      return await contract.StakeStatus(account, stakedId).call();\n    } catch (err) {\n      throw new Error('Failed get Staking Status');\n    }\n  },\n  getExpectedPoolReward: async _ref16 => {\n    let {\n      contract,\n      stakedId,\n      account\n    } = _ref16;\n\n    try {\n      return await contract.expectedPoolReward(account, stakedId).call();\n    } catch (err) {\n      throw new Error('Failed get ExpectedPoolReward');\n    }\n  }\n};\nexport default Repository;","map":{"version":3,"sources":["C:/Users/user/Desktop/SBPGIT/DAPP_Staking_SBP/src/store/repository.js"],"names":["Web3","Web3EthContract","ethereum","window","metamaskIsInstalled","isMetaMask","web3","abi_SBP","abi_staking","CONFIG_SBP","CONFIG_staking","setProvider","Repository","fetchContract","fetch","headers","Accept","then","res","json","smartContractObj_SBP","CONTRACT_ADDRESS","smartContractObj_staking","smartContract_SBP","smartContract_staking","walletConnect","accounts","request","method","networkId","NETWORK","ID","err","NAME","Error","getTVL","contract","StakerTVL","call","approveMaxBalance","stakingAddress","account","approveMax","send","from","getAllowance","console","log","allowance","getAccountStakingTotal","AccountStakingTotal","getTotalExpectedReward","getTotalRewardsExpected","getAccountTier","AccountTier","getSBPBalance","balanceOf","getPenaltyFee","getStorageNumbers","getPoolInfo","storageID","storages","getStakeIds","StakeIDs","getStakedPool","stakeIds","pools","stakeSBP","amount","storageId","amounts","utils","toWei","StakeSBP","unStake","stakedId","unstakeSBP","earlyClaimSBP","getStakeStatus","StakeStatus","getExpectedPoolReward","expectedPoolReward"],"mappings":"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","sourcesContent":["import Web3 from 'web3';\nimport Web3EthContract from 'web3-eth-contract';\nconst { ethereum } = window;\n\nconst metamaskIsInstalled = ethereum && ethereum.isMetaMask;\nlet web3;\nlet abi_SBP;\nlet abi_staking;\nlet CONFIG_SBP;\nlet CONFIG_staking;\nif (metamaskIsInstalled) {\n  Web3EthContract.setProvider(ethereum);\n  web3 = new Web3(ethereum);\n}\n\nconst Repository = {\n  fetchContract: async () => {\n    abi_SBP = await fetch('/config/abi_SBP.json', {\n      headers: {\n        'Content-Type': 'application/json',\n        Accept: 'application/json',\n      },\n    }).then(res => {\n      return res.json();\n    });\n    abi_staking = await fetch('/config/abi_staking.json', {\n      headers: {\n        'Content-Type': 'application/json',\n        Accept: 'application/json',\n      },\n    }).then(res => {\n      return res.json();\n    });\n    CONFIG_SBP = await fetch('/config/config_SBP.json', {\n      headers: {\n        'Content-Type': 'application/json',\n        Accept: 'application/json',\n      },\n    }).then(res => {\n      return res.json();\n    });\n    CONFIG_staking = await fetch('/config/config_staking.json', {\n      headers: {\n        'Content-Type': 'application/json',\n        Accept: 'application/json',\n      },\n    }).then(res => {\n      return res.json();\n    });\n    const smartContractObj_SBP = new Web3EthContract(\n      abi_SBP,\n      CONFIG_SBP.CONTRACT_ADDRESS,\n    );\n    const smartContractObj_staking = new Web3EthContract(\n      abi_staking,\n      CONFIG_staking.CONTRACT_ADDRESS,\n    );\n    return {\n      smartContract_SBP: smartContractObj_SBP,\n      smartContract_staking: smartContractObj_staking,\n      web3: web3,\n    };\n  },\n\n  walletConnect: async () => {\n    if (metamaskIsInstalled) {\n      try {\n        const [accounts] = await ethereum.request({\n          method: 'eth_requestAccounts',\n        });\n        const networkId = await ethereum.request({\n          method: 'net_version',\n        });\n        if (networkId == CONFIG_staking.NETWORK.ID) {\n          return accounts;\n\n          // Add listeners end\n        } else {\n          throw 'netErr';\n        }\n      } catch (err) {\n        if (err === 'netErr')\n          throw `Change network to ${CONFIG_staking.NETWORK.NAME}.`;\n        else throw new Error('Something went wrong.');\n      }\n    }\n  },\n  getTVL: async contract => {\n    try {\n      const res = await contract.StakerTVL().call();\n      return res;\n    } catch (err) {\n      throw new Error('Failed Getting Total_Value_Locked !');\n    }\n  },\n  approveMaxBalance: async ({ contract, stakingAddress, account }) => {\n    try {\n      const res = await contract.approveMax(stakingAddress).send({\n        from: account,\n      });\n      return res;\n    } catch (err) {\n      throw new Error('Failed Getting ApproveMax');\n    }\n  },\n  getAllowance: async ({ contract, stakingAddress, account }) => {\n    try {\n      console.log('111');\n      const res = await contract.allowance(account, stakingAddress).call();\n      return res;\n    } catch (err) {\n      throw new Error('Failed Getting Allowance');\n    }\n  },\n  getAccountStakingTotal: async ({ contract, account }) => {\n    try {\n      const res = await contract.AccountStakingTotal(account).call();\n      return res;\n    } catch (err) {\n      throw new Error('Failed Getting Account Staking Total !');\n    }\n  },\n  getTotalExpectedReward: async ({ contract, account }) => {\n    try {\n      const res = await contract.getTotalRewardsExpected(account).call();\n      return res;\n    } catch (err) {\n      throw new Error('Failed Getting Account Staking Total !');\n    }\n  },\n  getAccountTier: async ({ contract, account }) => {\n    try {\n      const res = await contract.AccountTier(account).call();\n      if (res===2) {\n        return 'Silver';\n      } else if (res===3){\n        return 'Gold'\n      } else if (res===4){\n        return 'Platinum'\n      } else if (res===5){\n        return 'Diamond'\n      } else { return 'None'}\n    } catch (err) {\n      throw new Error('Failed Getting Accounnt Tier !');\n    }\n  },\n  getSBPBalance: async ({ contract, account }) => {\n    try {\n      const res = await contract.balanceOf(account).call();\n      return res;\n    } catch (err) {\n      throw new Error('Failed Getting Balance !');\n    }\n  },\n  getPenaltyFee: async ({ contract }) => {\n    try {\n      const res = await contract.getPenaltyFee().call();\n      // console.log(res);\n      return res;\n    } catch (err) {\n      throw new Error('Failed Getting PenaltyFee');\n    }\n  },\n  getStorageNumbers: async ({ contract }) => {\n    try {\n      const res = await contract.getStorageNumbers().call();\n      // console.log('storageNum: ', res);\n      return res;\n    } catch (err) {\n      throw new Error('Failed Getting Pool Number');\n    }\n  },\n  getPoolInfo: async ({ contract, storageID }) => {\n    try {\n      const res = await contract.storages(storageID).call();\n      return res;\n    } catch (err) {\n      throw new Error('Failed Getting Pool Number');\n    }\n  },\n  getStakeIds: async ({ contract, account }) => {\n    try {\n      const res = await contract.StakeIDs(account).call();\n      return res;\n    } catch (err) {\n      throw new Error('Failed Getting StakeIDs');\n    }\n  },\n  getStakedPool: async ({ contract, account, stakeIds }) => {\n    try {\n      const res = await contract.pools(account, stakeIds).call();\n      return res;\n    } catch (err) {\n      throw new Error('Faild Getting Pool Info');\n    }\n  },\n  stakeSBP: async ({ contract, amount, storageId, account }) => {\n      var amounts = web3.utils.toWei(''+amount,'ether');\n      const res = await contract.StakeSBP(amounts, storageId).send({\n        from: account,\n      });\n      // console.log('res', res);\n      return res;\n\n  },\n  unStake: async ({ contract, stakedId, account }) => {\n    try {\n      const res = await contract.unstakeSBP(stakedId).send({\n        from: account,\n      });\n      // console.log('unstakeSBP', res);\n      return res;\n    } catch (err) {\n      throw new Error('Failed Claim Reward');\n    }\n  },\n  earlyClaimSBP: async ({ contract, stakedId, account }) => {\n    try {\n      const res = await contract.earlyClaimSBP(stakedId).send({\n        from: account,\n      });\n      // console.log('earlyClaimSBP', res);\n      return res;\n    } catch (err) {\n      throw new Error('Failed Claim Early Reward');\n    }\n  },\n  getStakeStatus: async ({ contract, stakedId, account }) => {\n    try {\n      return await contract.StakeStatus(account, stakedId).call();\n    } catch (err) {\n      throw new Error('Failed get Staking Status');\n    }\n  },\n  getExpectedPoolReward: async ({ contract, stakedId, account }) => {\n    try {\n      return await contract.expectedPoolReward(account, stakedId).call();\n    } catch (err) {\n      throw new Error('Failed get ExpectedPoolReward');\n    }\n  },\n};\n\nexport default Repository;\n"]},"metadata":{},"sourceType":"module"}